@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime;
@inject Services.CLI CLI;
@inject Services.Nginx Nginx;

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <span style="padding-right: 10px;">
                Running As: @whoami
            </span>

            <span style="padding-right: 10px;">
                Service: @Nginx.ServiceStatus.ToString()
            </span>

            <span>
                <button class="btn @(Nginx.ServiceStatus == Services.Nginx.enuServiceStatus.Running ? "red fa-stop" : "green fa-play") rounded small fa button-icon" @onclick=@(() => PerformServiceAction()) title="@Nginx.ReturnServiceActionString()">&nbsp;&nbsp;@Nginx.ReturnServiceActionString()</button>
            </span>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string whoami = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CLI.RunCommand("whoami", "");

            whoami = CLI.StandardOut;

            StateHasChanged();
        }
    }

    private async void PerformServiceAction()
    {
        if (Nginx.ServiceStatus == Services.Nginx.enuServiceStatus.Stopped)
        {
            Nginx.PerformServiceAction(Services.Nginx.enuServiceAction.Start);
            await JSRuntime.InvokeVoidAsync("notify", "success", "Nginx service started!", 5);
        }
        else if (Nginx.ServiceStatus == Services.Nginx.enuServiceStatus.Running)
        {
            Nginx.PerformServiceAction(Services.Nginx.enuServiceAction.Stop);
            await JSRuntime.InvokeVoidAsync("notify", "success", "Nginx service stopped!", 5);
        }
    }
}