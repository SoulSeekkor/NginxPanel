@inherits LayoutComponentBase

@inject Services.CLI CLI;
@inject Services.Nginx Nginx;
@inject NotificationService NotificationService

<CascadingValue Value="this">
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <span style="padding-right: 10px;">
                    Running As: @whoami
                </span>

                <span style="padding-right: 10px;">
                    Nginx Service: @Nginx.ServiceStatus.ToString()
                </span>

                <span>
                    @if (Nginx.ServiceStatus == Services.Nginx.enuServiceStatus.Running)
                    {
                        <button type="button" class="btn red fa fa-stop rounded small button-icon" @onclick=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Stop)) title="Stop">&nbsp;&nbsp;Stop</button>
                        <button type="button" class="btn blue fa fa-rotate-right rounded small button-icon" @onclick=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Restart)) title="Restart">&nbsp;&nbsp;Restart</button>
                    }
                    else
                    {
                        <button type="button" class="btn green fa fa-play rounded small button-icon" @onclick=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Start)) title="Start">&nbsp;&nbsp;Start</button>
                    }
                    <button type="button" class="btn purple fa fa-check rounded small button-icon" @onclick=@(() => TestConfig()) title="Test Config">&nbsp;&nbsp;Test Config</button>
                </span>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>

    <RadzenComponents />
</CascadingValue>

@code {
    private string whoami = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CLI.RunCommand("whoami", "");

            whoami = CLI.StandardOut;

            StateHasChanged();
        }
    }

    private void PerformServiceAction(Services.Nginx.enuServiceAction action)
    {
        // Perform requested action
        Nginx.PerformServiceAction(action);

        switch (action)
        {
            case Services.Nginx.enuServiceAction.Start:
                ShowNotification(NotificationSeverity.Info, "Service Status", "Nginx service started!");
                break;

            case Services.Nginx.enuServiceAction.Stop:
                ShowNotification(NotificationSeverity.Info, "Service Status", "Nginx service stopped!");
                break;

            case Services.Nginx.enuServiceAction.Restart:
                ShowNotification(NotificationSeverity.Info, "Service Status", "Nginx service restarted!");
                break;
        }
    }

    public void ShowNotification(NotificationSeverity severity, string title, string message, int duration = 3000)
    {
        NotificationMessage notifMessage = new NotificationMessage();

        notifMessage.Severity = severity;
        notifMessage.Summary = title;
        notifMessage.Detail = message;
        notifMessage.Duration = duration;
        notifMessage.CloseOnClick = true;


        NotificationService.Notify(notifMessage);
    }

    private void TestConfig()
    {
        
    }
}