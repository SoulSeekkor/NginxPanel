@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime;

@inject Services.CLI cli;
@inject Services.Nginx nginx;
@inject NotificationService NotificationService

<CascadingValue Value="this">
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <span style="padding-right: 50px;">
                    User: @cli.RunningAsUser
                    <br />
                    Nginx Service: @nginx.ServiceStatus.ToString()
                </span>

                <span>
                    @if (nginx.ServiceStatus != Services.Nginx.enuServiceStatus.Unknown)
                    {
                        @if (nginx.ServiceStatus == Services.Nginx.enuServiceStatus.Running)
                        {
                            <RadzenButton Click=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Stop)) Disabled="disableAllButtons" Text="Stop" Icon="stop" ButtonStyle="ButtonStyle.Primary" />
                            <RadzenButton Click=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Restart)) Disabled="disableAllButtons" Text="Restart" Icon="replay" ButtonStyle="ButtonStyle.Warning" />
                        }
                        else
                        {
                            <RadzenButton Click=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Start)) Disabled="disableAllButtons" Text="Start" Icon="play_arrow" ButtonStyle="ButtonStyle.Success" />
                        }
                        <RadzenButton Click=@(() => TestConfig()) Disabled="disableAllButtons" Text="Test Config" Icon="check" BusyText="Testing..." IsBusy="busyTesting" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" />
                    }
                </span>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>

    <RadzenComponents />
</CascadingValue>

@code {
    private bool disableAllButtons = false;
    private bool busyTesting = false;

    public enum toastType
    {
        success,
        warning,
        error,
        info
    }

    public async Task DisplayToast(toastType type, string message, string title = "", bool dismissable = false)
    {
        await JSRuntime.InvokeVoidAsync("toast", type.ToString(), message, title, dismissable);
    }

    private async void PerformServiceAction(Services.Nginx.enuServiceAction action)
    {
        try
        {
            disableAllButtons = true;

            // Perform requested action
            await Task.Run(() => nginx.PerformServiceAction(action));

            switch (action)
            {
                case Services.Nginx.enuServiceAction.Start:
                    await DisplayToast(toastType.info, "Nginx service started!");
                    break;

                case Services.Nginx.enuServiceAction.Stop:
                    await DisplayToast(toastType.info, "Nginx service stopped!");
                    break;

                case Services.Nginx.enuServiceAction.Restart:
                    await DisplayToast(toastType.info, "Nginx service restarted!");
                    break;
            }
        }
        finally
        {
            disableAllButtons = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async void TestConfig()
    {
        try
        {
            busyTesting = true;

            string results = "";
            await Task.Run(() => results = nginx.TestConfig());

            if (results.Contains("test is successful"))
            {
                await DisplayToast(toastType.success, "Nginx configuration test was successful!");
            }
            else
            {
                await DisplayToast(toastType.error, "Nginx configuration test failed! View sites with errors for more details.");
            }
        }
        finally
        {
            busyTesting = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }
}