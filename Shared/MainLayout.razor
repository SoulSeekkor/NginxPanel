@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <span>
                Running As: @whoami
            </span>
            <span>
                <button @onclick=PerformServiceAction title="Start">@serviceAction</button>
            </span>

            <span>
                Service: @status
            </span>

            <a href="">Logout</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string whoami = "";

    private string status = "Checking...";

    private string serviceAction = "N/A";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CLI.RunCommand("whoami", "", out whoami, out _);

            StateHasChanged();
            //await _cli.RunCommandAsync("systemctl status nginx");
        }
    }

    private void PerformServiceAction()
    {
        //if (serviceAction == "Start")
        //{
        //    await _cli.RunCommandAsync("sudo systemctl start nginx");
        //}
        //else if (serviceAction == "Stop")
        //{
        //    await _cli.RunCommandAsync("sudo systemctl stop nginx");
        //}

        //await _cli.RunCommandAsync("systemctl status nginx");
    }

    //private void CLI_OutputDataReceived(object sender, DataReceivedEventArgs e)
    //{
    //    if (!(e.Data is null))
    //    {
    //        if (e.Data.Contains("unrecognized"))
    //        {
    //            status = "<Unknown>";
    //            serviceAction = "N/A";
    //        }
    //        else if (e.Data.Contains("inactive"))
    //        {
    //            status = "Not Running";
    //            serviceAction = "Start";
    //        }
    //        else if (e.Data.Contains("active"))
    //        {
    //            status = "Running";
    //            serviceAction = "Stop";
    //        }
    //    }

    //    InvokeAsync(() => StateHasChanged());
    //}
}