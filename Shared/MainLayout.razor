@inherits LayoutComponentBase

@inject Services.CLI CLI;
@inject Services.Nginx Nginx;
@inject NotificationService NotificationService

<CascadingValue Value="this">
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <span style="padding-right: 10px;">
                    Running As: @whoami
                </span>

                <span style="padding-right: 10px;">
                    Nginx Service: @Nginx.ServiceStatus.ToString()
                </span>

                <span>
                    @if (Nginx.ServiceStatus == Services.Nginx.enuServiceStatus.Running)
                    {
                        <RadzenButton Click=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Stop)) Disabled="disableAllButtons" Text="Stop" Icon="stop" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton Click=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Restart)) Disabled="disableAllButtons" Text="Restart" Icon="replay" ButtonStyle="ButtonStyle.Secondary" />
                    }
                    else
                    {
                        <RadzenButton Click=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Start)) Disabled="disableAllButtons" Text="Start" Icon="play_arrow" ButtonStyle="ButtonStyle.Success" />
                    }
                    <RadzenButton Click=@(() => TestConfig()) Disabled="disableAllButtons" Text="Test Config" Icon="check" BusyText="Testing..." IsBusy="busyTesting" ButtonStyle="ButtonStyle.Light" class="rz-ripple" />
                </span>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>

    <RadzenComponents />
</CascadingValue>

@code {
    private string whoami = "";
    private bool disableAllButtons = false;
    private bool busyTesting = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CLI.RunCommand("whoami", "");

            whoami = CLI.StandardOut;

            StateHasChanged();
        }
    }

    private async void PerformServiceAction(Services.Nginx.enuServiceAction action)
    {
        try
        {
            disableAllButtons = true;

            // Perform requested action
            await Task.Run(() => Nginx.PerformServiceAction(action));

            switch (action)
            {
                case Services.Nginx.enuServiceAction.Start:
                    ShowNotification(NotificationSeverity.Info, "Service Status", "Nginx service started!");
                    break;

                case Services.Nginx.enuServiceAction.Stop:
                    ShowNotification(NotificationSeverity.Info, "Service Status", "Nginx service stopped!");
                    break;

                case Services.Nginx.enuServiceAction.Restart:
                    ShowNotification(NotificationSeverity.Info, "Service Status", "Nginx service restarted!");
                    break;
            }
        }
        finally
        {
            disableAllButtons = false;
            StateHasChanged();
        }
    }

    public void ShowNotification(NotificationSeverity severity, string title, string message, int duration = 3000)
    {
        NotificationMessage notifMessage = new NotificationMessage();

        notifMessage.Severity = severity;
        notifMessage.Summary = title;
        notifMessage.Detail = message;
        notifMessage.Duration = duration;
        notifMessage.CloseOnClick = true;
        notifMessage.Style = "font-weight: bold;";

        NotificationService.Notify(notifMessage);
    }

    private async void TestConfig()
    {
        try
        {
            busyTesting = true;
            await Task.Run(() => System.Threading.Thread.Sleep(2000));
        }
        finally
        {
            busyTesting = false;
            StateHasChanged();
        }
    }
}