@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime;

@inject Services.CLI cli;
@inject Services.Nginx nginx;
@inject DialogService DialogService;
@inject NotificationService NotificationService;
@inject TooltipService TooltipService;

<CascadingValue Value="this">
    <RadzenLayout Style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
        <RadzenHeader>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                <span style="padding-right: 50px;">
                    User: @cli.RunningAsUser
                    <br />
                    Nginx Service: @nginx.ServiceStatus.ToString()
                </span>

                <span>
                    @if (nginx.ServiceStatus != Services.Nginx.enuServiceStatus.Unknown)
                    {
                        @if (nginx.ServiceStatus == Services.Nginx.enuServiceStatus.Running)
                        {
                            <RadzenButton Click=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Stop)) Disabled="disableAllButtons" Text="Stop" Icon="stop" ButtonStyle="ButtonStyle.Primary" />
                            <RadzenButton Click=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Restart)) Disabled="disableAllButtons" Text="Restart" Icon="replay" ButtonStyle="ButtonStyle.Warning" />
                        }
                        else
                        {
                            <RadzenButton Click=@(() => PerformServiceAction(Services.Nginx.enuServiceAction.Start)) Disabled="disableAllButtons" Text="Start" Icon="play_arrow" ButtonStyle="ButtonStyle.Success" />
                        }
                        <RadzenButton Click=@(() => TestConfig()) Disabled="disableAllButtons" Text="Test Config" Icon="check" BusyText="Testing..." IsBusy="busyTesting" ButtonStyle="ButtonStyle.Secondary" class="rz-ripple" />
                    }
                </span>
                <span style="margin-left: 100px;">
                    Version: @(GetType()?.Assembly?.GetName()?.Version?.ToString()) (Beta)
                </span>
            </RadzenStack>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@sidebarExpanded">
            <RadzenPanelMenu>
                <RadzenPanelMenuItem Text="Dashboard" Icon="home" Path="dashboard" />
                <RadzenPanelMenuItem Text="Configs" Icon="description" Path="configs" />
                <RadzenPanelMenuItem Text="Certificates" Icon="shield" Path="certificates" />
                <RadzenPanelMenuItem Text="Settings" Icon="settings" Path="settings" />
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody>
            <div class="rz-p-4">
                @Body
            </div>
        </RadzenBody>
    </RadzenLayout>

    <RadzenComponents />
</CascadingValue>

@code {
    private bool sidebarExpanded = true;
    private bool disableAllButtons = false;
    private bool busyTesting = false;

    public enum toastType
    {
        success,
        warning,
        error,
        info
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            nginx.ServiceStatusChanged += RefreshServiceStatus;
    }

    public async Task DisplayToast(toastType type, string message, string title = "", bool dismissable = false)
    {
        await JSRuntime.InvokeVoidAsync("toast", type.ToString(), message, title, dismissable);
    }

    public void ShowTooltip(ElementReference elementReference, string text, TooltipOptions? options = null) => TooltipService.Open(elementReference, text, options);

    private async void PerformServiceAction(Services.Nginx.enuServiceAction action)
    {
        try
        {
            disableAllButtons = true;

            // Perform requested action
            await Task.Run(() => nginx.PerformServiceAction(action));

            switch (action)
            {
                case Services.Nginx.enuServiceAction.Start:
                    await DisplayToast(toastType.info, "Nginx service started!");
                    break;

                case Services.Nginx.enuServiceAction.Stop:
                    await DisplayToast(toastType.info, "Nginx service stopped!");
                    break;

                case Services.Nginx.enuServiceAction.Restart:
                    await DisplayToast(toastType.info, "Nginx service restarted!");
                    break;
            }
        }
        finally
        {
            disableAllButtons = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async void TestConfig()
    {
        try
        {
            busyTesting = true;

            await Task.Run(() => nginx.TestConfig());

            string results = nginx.LastTestResults;

            if (results.Contains("Successful"))
            {
                await DisplayToast(toastType.success, "Nginx configuration test was successful!");
            }
            else
            {
                await DisplayToast(toastType.error, $"Nginx configuration test failed! View dashboard for more information.");
            }
        }
        finally
        {
            busyTesting = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async void RefreshServiceStatus()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task InvokeStateHasChanged()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", ds =>
        {
            return 
                @<RadzenStack AlignItems="AlignItems.Center" Class="rz-m-6" Gap="2rem">
                    @message
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                </RadzenStack>;
        }, new DialogOptions() { ShowTitle = false, Style = "min-height: auto; min-width: auto; width: auto;", CloseDialogOnEsc = false });
    }
}