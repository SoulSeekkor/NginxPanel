@inherits LayoutComponentBase
@using System.Diagnostics;

@inject Shared.State.CLI _cli

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <span>
                <button @onclick=PerformServiceAction title="Start">@serviceAction</button>
            </span>

            <span>
                Service: @status
            </span>

            <a href="">Logout</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string status = "Checking...";

    private string serviceAction = "N/A";

    protected override void OnInitialized()
    {
        _cli.OutReceived += new DataReceivedEventHandler(CLI_OutputDataReceived);
        _cli.ErrorReceived += new DataReceivedEventHandler(CLI_OutputDataReceived);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _cli.RunCommandAsync("service nginx status");
        }
    }

    private async void PerformServiceAction()
    {
        if (serviceAction == "Start")
        {
            await _cli.RunCommandAsync("service nginx start");
        }
        else if (serviceAction == "Stop")
        {
            await _cli.RunCommandAsync("service nginx stop");
        }

        await _cli.RunCommandAsync("service nginx status");
    }

    private void CLI_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
        if (!(e.Data is null))
        {
            if (e.Data.Contains("unrecognized"))
            {
                status = "<Unknown>";
                serviceAction = "N/A";
            }
            else if (e.Data.Contains("not running"))
            {
                status = "Not Running";
                serviceAction = "Start";
            }
            else if (e.Data.Contains("running"))
            {
                status = "Running";
                serviceAction = "Stop";
            }
        }

        InvokeAsync(() => StateHasChanged());
    }
}