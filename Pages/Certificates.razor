@page "/certificates"

@inject DialogService DialogService;
@inject Services.ACME acme;

<PageTitle>Certificates</PageTitle>
<br />
<br />
<h3>Certificates</h3>

@if (acme.Installed)
{
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
		<RadzenButton Click=@(() => RefreshCertificates(true)) Disabled="busyRefreshing" Text="Refresh" Icon="cached" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Info" class="rz-mr-5" />
		<RadzenButton Click=@(() => AddCertificate()) Disabled="busyRefreshing" Text="Add" Icon="add" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Success" />
	</RadzenStack>
	<br />
	<br />

	if (acme.Certificates.Count == 0)
	{
		<span>There are currently no certificates to display.</span>
	}
	else
	{
		foreach (Services.ACME.Certificate cert in acme.Certificates)
		{
			
		}
	}
}
else
{
	<span>This is where certificates will be displayed once ACME has been installed.</span>
}

@code {
	[CascadingParameter]
	private MainLayout? layout { get; set; }

	private bool busyRefreshing = false;

	private async void RefreshCertificates(bool notifyUser)
	{
		try
		{
			busyRefreshing = true;

			await Task.Run(() => acme.RefreshCertificates());

			if (notifyUser)
			{
				layout?.DisplayToast(MainLayout.toastType.info, "Certificates refreshed successfully!");
			}
		}
		finally
		{
			busyRefreshing = false;
			await InvokeAsync(() => StateHasChanged());
		}
	}

	private async void AddCertificate()
	{
		List<string> domains = new List<string>() { "test.com", "test.net" };
		string newDomain = string.Empty;
		string selectedSAN = string.Empty;
		string addSANdomain = string.Empty;
		bool exportToPFX = false;
		string PFXpassword = string.Empty;
		RadzenListBox<string>? SANs = null;
		RadzenButton? deleteSAN = null;
		bool SANselected = false;

		var result = await DialogService.OpenAsync("Add Certificate", ds =>
	@<RadzenStack>
		<span>Please enter the primary certificate domain:</span>
		<RadzenTextBox @bind-Value=newDomain class="w-100" />
		<span>Please enter the subject alternative domains (SANs):</span>
		<RadzenTextBox @bind-Value=addSANdomain class="w-100" /><RadzenButton Click=@(() => AddSAN(domains, addSANdomain, SANs)) Icon="add" ButtonStyle="ButtonStyle.Success" />
		<RadzenListBox @ref=SANs @bind-Value=selectedSAN Data="@domains" SelectedItemChanged="() => { SANselected = !String.IsNullOrWhiteSpace(selectedSAN); StateHasChanged(); }" Style="height: 180px;" />
		<RadzenButton @ref=deleteSAN Click =@(() => DeleteSAN(domains, selectedSAN, SANs)) Icon="delete" ButtonStyle="ButtonStyle.Danger" />
		<span class="rz-text-align-left rz-mt-5 rz-mb-5">
			<RadzenCheckBox @bind-Value=exportToPFX Name="chkExportPFX" />
			<RadzenLabel Text="Export to PFX" Component="chkExportPFX" Style="margin-left: 8px; vertical-align: middle;" />
			<RadzenLabel Text="PFX password:" Style="margin-left: 50px; vertical-align: middle;" />
			<RadzenTextBox @bind-Value=PFXpassword class="w-20" />
		</span>
		<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
			<RadzenStack Orientation="Orientation.Horizontal">
				<RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
				<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
			</RadzenStack>
		</RadzenStack>
	</RadzenStack>
	);

		if (!(result is null) && result)
		{
			// Create new certificate
		}
	}

	private void AddSAN(List<string> domains, string addSANdomain, RadzenListBox<string>? SANs)
	{
		if (!domains.Contains(addSANdomain))
		{
			domains.Add(addSANdomain);

			// Force the listbox to refresh
			SANs?.Reset();
		}
		else
			layout?.DisplayToast(MainLayout.toastType.info, "SAN already exists!");
	}

	private void DeleteSAN(List<string> domains, string selectedSAN, RadzenListBox<string>? SANs)
	{
		if (!String.IsNullOrWhiteSpace(selectedSAN) && domains.Contains(selectedSAN))
		{
			domains.Remove(selectedSAN);

			// Force the listbox to refresh
			SANs?.Reset();
		}
	}
}