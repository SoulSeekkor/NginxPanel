@page "/certificates"

@using System.Text.RegularExpressions;

@inject DialogService DialogService;
@inject IJSRuntime JSRuntime
@inject Services.ACME acme;

<PageTitle>Certificates</PageTitle>
<br />
<br />
<h3>Certificates@(acme.Installed ? $" ({acme.Certificates.Count})" : "")</h3>

@if (acme.Installed)
{
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
		<RadzenButton Click=@(() => RefreshCertificates(true)) Disabled="busyRefreshing" Text="Refresh" Icon="cached" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Info" class="rz-mr-5" />
		<RadzenButton Click=@(() => AddCertificate()) Disabled="busyRefreshing" Text="Add" Icon="add" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Success" />
	</RadzenStack>
	<br />
	<br />

	if (acme.Certificates.Count == 0)
	{
		<span>There are currently no certificates to display.</span>
	}
	else
	{
		foreach (Services.ACME.Certificate cert in acme.Certificates)
		{
			<RadzenCard Class="rz-my-8" Style="max-width: 550px">
				<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
					<RadzenStack Gap="0">
						<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Main Domain</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1"><b>@cert.MainDomain</b></RadzenText>
						@if (!String.IsNullOrWhiteSpace(cert.SANDomains))
						{
							<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">SAN Domains</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1"><b>@cert.SANDomains</b></RadzenText>
						}
					</RadzenStack>
				</RadzenStack>
				<RadzenCard class="rz-background-color-primary-light rz-shadow-0 rz-border-radius-0 rz-p-5" style="margin: 0.25rem calc(.75 * var(--rz-card-padding));">
					<RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>More Details</strong></RadzenText>
					<RadzenRow>
						<RadzenColumn>
							<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">API</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.API</b></RadzenText>
						</RadzenColumn>
					</RadzenRow>
					<RadzenRow RowGap="0">
						<RadzenColumn SizeSM="8">
							<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Key Length</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.KeyLength</b></RadzenText>
							<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Webroot</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Webroot</b></RadzenText>
						</RadzenColumn>
						@if (cert.Created.HasValue)
						{
							<RadzenColumn SizeSM="4">
								<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Created</RadzenText>
								<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Created?.ToString("M/d/yyyy h:mm tt")</b></RadzenText>
								<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Renew</RadzenText>
								<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Renew?.ToString("M/d/yyyy h:mm tt")</b></RadzenText>
							</RadzenColumn>
						}
					</RadzenRow>
				</RadzenCard>
				<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
					<RadzenButton Variant="Variant.Text" Text="Delete" Click="() => DeleteCertificate(cert)" />
					<RadzenStack Orientation="Orientation.Horizontal">
						<RadzenButton Variant="Variant.Text" Text="Install" Click="() => InstallCertificate(cert)" class="rz-text-secondary-color" />
						<RadzenButton Variant="Variant.Text" Text="Force Renew" Click="() => ForceRenewCertificate(cert)" class="rz-text-secondary-color" />
						<RadzenButton Variant="Variant.Text" Text="Details" Click="() => ViewCertificateDetails(cert)" ButtonStyle="ButtonStyle.Secondary" />
					</RadzenStack>
				</RadzenStack>
			</RadzenCard>
		}
	}
}
else
{
	<span>This is where certificates will be displayed once ACME has been installed.</span>
}

@code {
	[CascadingParameter]
	private MainLayout? layout { get; set; }

	private bool busyRefreshing = false;

	private string fqdnRegEx = @"^(?=^.{1,254}$)(^(?:(?!\.|-)([a-z0-9\-\*]{1,63}|([a-z0-9\-]{1,62}[a-z0-9]))\.)+(?:[a-z]{2,})$)$";

	private async void RefreshCertificates(bool notifyUser)
	{
		try
		{
			busyRefreshing = true;

			await Task.Run(() => acme.RefreshCertificates());

			if (notifyUser)
			{
				layout?.DisplayToast(MainLayout.toastType.info, "Certificates refreshed successfully!");
			}
		}
		finally
		{
			busyRefreshing = false;
			await InvokeAsync(() => StateHasChanged());
		}
	}

	private class AddCertificateModel
	{
		public string CA = string.Empty;
		public string primaryDomain = string.Empty;

		// SAN listbox related variables
		public RadzenListBox<string>? SANs = null;
		public List<string> SANdomains = new List<string>();
		public string selectedSAN = string.Empty;
		public string newSANdomain = string.Empty;
	}

	private class InstallCertificateModel
	{
		public Services.ACME.Certificate? cert = null;

		public string rootFolder = string.Empty;
		public string keyFilename = string.Empty;
		public string fullChainFilename = string.Empty;
		public bool reloadNginx = true;
		public string reloadCmd = string.Empty;

		// PFX related variables
		public bool exportToPFX = false;
		public string PFXpassword = string.Empty;
	}

	private async void CopyToClipboard(string name, string value)
	{
		await JSRuntime.InvokeAsync<string>("clipboardCopy", value);
		layout?.DisplayToast(MainLayout.toastType.success, name + " copied to the clipboard successfully!");
	}

	private async void DeleteCertificate(Services.ACME.Certificate cert)
	{
		bool? confirm = await DialogService.Confirm($"Are you sure you want to delete certificate <span style='color: DeepSkyBlue; font-style: italic;'>{cert.MainDomain}</span>?", "Delete Certificate", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

		if (confirm.HasValue && confirm.Value)
		{
			await Task.Run(() =>
			{
				if (acme.DeleteCertificate(cert))
				{
					layout?.DisplayToast(MainLayout.toastType.success, $"Certificate <span style='color: DarkRed; font-style: italic;'>{cert.MainDomain}</span> has been deleted!");
					RefreshCertificates(false);
				}
				else
					layout?.DisplayToast(MainLayout.toastType.error, "Failed to delete certificate!");
			});
		}
	}

	private async void ForceRenewCertificate(Services.ACME.Certificate cert)
	{
		bool? confirm = await DialogService.Confirm($"Are you sure you want to force renewal for certificate <span style='color: DeepSkyBlue; font-style: italic;'>{cert.MainDomain}</span>?", "Renew Certificate", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

		if (confirm.HasValue && confirm.Value)
		{
			await Task.Run(() =>
			{
				string response = string.Empty;

				if (acme.ForceRenewCertificate(cert, ref response))
				{
					layout?.DisplayToast(MainLayout.toastType.success, $"Certificate <span style='color: DarkRed; font-style: italic;'>{cert.MainDomain}</span> has been renewed!");
					RefreshCertificates(false);
				}
				else
					layout?.DisplayToast(MainLayout.toastType.error, $"Failed to force certificate renewal: {response}");
			});

		}
	}


	private async void ViewCertificateDetails(Services.ACME.Certificate cert)
	{
		await DialogService.OpenAsync("Certificate Details", ds =>
	@<RadzenCard Class="rz-my-8" Style="max-width: 550px">
		<RadzenRow>
			<RadzenColumn>
				<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Main Domain</RadzenText>
				<RadzenText TextStyle="TextStyle.Body1"><b>@cert.MainDomain</b></RadzenText>
			</RadzenColumn>
		</RadzenRow>
		<RadzenRow>
		@if (!String.IsNullOrWhiteSpace(cert.SANDomains))
		{
			<RadzenColumn>
				<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">SAN Domains</RadzenText>
				<RadzenText TextStyle="TextStyle.Body1"><b>@cert.SANDomains</b></RadzenText>
			</RadzenColumn>
		}
		</RadzenRow>
		@if (cert.Installed)
		{
			<RadzenRow>
				<RadzenColumn>
					<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Real Key Path</RadzenText>
					<RadzenRow>
						<RadzenText TextStyle="TextStyle.Body1"><b>@cert.RealKeyPath</b></RadzenText>
						<RadzenButton Click="@(() => CopyToClipboard("Real key path", cert.RealKeyPath))" Icon="content_copy" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Dark" Style="float: right;" />
					</RadzenRow>
				</RadzenColumn>
			</RadzenRow>
			<RadzenRow>
				<RadzenColumn>
					<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Real Full Chain Path</RadzenText>
					<RadzenRow>
						<RadzenText TextStyle="TextStyle.Body1"><b>@cert.RealFullChainPath</b></RadzenText>
						<RadzenButton Click="@(() => CopyToClipboard("Real full chain path", cert.RealFullChainPath))" Icon="content_copy" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Dark" Style="float: right;" />
					</RadzenRow>
				</RadzenColumn>
			</RadzenRow>
		}
		<RadzenRow>
			<RadzenColumn>
				<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">API</RadzenText>
				<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.API</b></RadzenText>
			</RadzenColumn>
		</RadzenRow>
		<RadzenRow RowGap="0">
			<RadzenColumn SizeSM="8">
				<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Key Length</RadzenText>
				<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.KeyLength</b></RadzenText>
				<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Webroot</RadzenText>
				<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Webroot</b></RadzenText>
			</RadzenColumn>
			@if (cert.Created.HasValue)
			{
				<RadzenColumn SizeSM="4">
					<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Created</RadzenText>
					<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Created?.ToString("M/d/yyyy h:mm tt")</b></RadzenText>
					<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Renew</RadzenText>
					<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Renew?.ToString("M/d/yyyy h:mm tt")</b></RadzenText>
				</RadzenColumn>
			}
		</RadzenRow>
		<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
			<RadzenButton Text="Close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
		</RadzenStack>
	</RadzenCard>
	);
	}

	private async void AddCertificate()
	{
		try
		{
			AddCertificateModel cert = new AddCertificateModel();
			var result = await DialogService.OpenAsync("Add Certificate", ds =>
	@<RadzenTemplateForm TItem="AddCertificateModel" Data=@cert Submit=@(() => AddCertSubmit(cert, ref ds))>
		<RadzenFieldset Text="Certificate Information">
			<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
				<div>
					<RadzenLabel Text="Certificate authority:" />
					<RadzenDropDown Data=acme.CertAuthorities.ToList() @bind-Value=cert.CA TValue="string" TextProperty="DisplayName" ValueProperty="CmdValue" DisabledProperty="Disabled" class="w-50" style="display: block" />
				</div>
				<div>
					<RadzenLabel Text="Please enter the primary certificate domain:" />
					<RadzenTextBox Name="PrimaryDomain" @bind-Value=cert.primaryDomain class="w-50" style="display: block" />
					<RadzenRequiredValidator Component="PrimaryDomain" Text="Primary domain is required" Popup=false Style="position: absolute" />
					<RadzenRegexValidator Component="PrimaryDomain" Text="Must be a valid domain or wildcard FQDN" Pattern="^(?=^.{1,254}$)(^(?:(?!\.|-)([a-z0-9\-\*]{1,63}|([a-z0-9\-]{1,62}[a-z0-9]))\.)+(?:[a-z]{2,})$)$" Popup=false Style="position: absolute" />
				</div>
				<div>
					<RadzenLabel Text="Please enter the subject alternative domains (SANs):" />
					<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
							<RadzenTextBox @bind-Value=cert.newSANdomain Style="width: 300px;" />
							<RadzenButton Click=@(() => AddSANDomain(cert)) Icon="add" ButtonStyle="ButtonStyle.Success" class="rz-mb-3" />
						</RadzenStack>
						<RadzenButton Click=@(() => DeleteSANDomain(cert)) Icon="delete" ButtonStyle="ButtonStyle.Danger" class="rz-mb-3" Style="float: right;" />
					</RadzenStack>
					<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenListBox @ref=cert.SANs @bind-Value=cert.selectedSAN Data="@cert.SANdomains" Style="height: 185px;" />
					</RadzenStack>
				</div>
				<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
					<RadzenButton Text="Ok" ButtonType="ButtonType.Submit" Style="width: 80px;" />
					<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
				</RadzenStack>
			</RadzenStack>
		</RadzenFieldset>
	</RadzenTemplateForm>
	);
		}
		catch
		{
			layout?.DisplayToast(MainLayout.toastType.error, "Exception occurred while displaying add certificate screen!");
		}
	}

	private void AddCertSubmit(AddCertificateModel cert, ref DialogService ds)
	{
		try
		{
			// Clear CA if it was the default
			AddCertificateModel temp = new AddCertificateModel();
			if (cert.CA == temp.CA)
				cert.CA = string.Empty;

			// Build domain list
			List<string> domains = cert.SANdomains.ToList();
			domains.Insert(0, cert.primaryDomain);

			// First, attempt to issue the certificate
			if (acme.IssueCertificate(domains, cert.CA))
			{
				layout?.DisplayToast(MainLayout.toastType.success, "Certificate issued successfully!");
				RefreshCertificates(false);
				ds.Close(true);
			}
			else
				layout?.DisplayToast(MainLayout.toastType.error, "Failed to issue certificate!");
		}
		catch
		{
			layout?.DisplayToast(MainLayout.toastType.error, "Exception occurred while adding certificate!");
		}
	}

	private void AddSANDomain(AddCertificateModel cert)
	{
		try
		{
			string newDomain = cert.newSANdomain;

			if (!String.IsNullOrWhiteSpace(newDomain))
			{
				if (new Regex(fqdnRegEx).IsMatch(newDomain))
				{
					if (!cert.SANdomains.Contains(newDomain))
					{
						cert.SANdomains.Add(newDomain);

						// Force the listbox to refresh
						cert.SANs?.Reset();
					}
					else
						layout?.DisplayToast(MainLayout.toastType.info, "SAN already exists!");
				}
				else
					layout?.DisplayToast(MainLayout.toastType.error, "SAN domain must be a valid FQDN or wildcard!");
			}
		}
		catch
		{
			layout?.DisplayToast(MainLayout.toastType.error, "Exception occurred while adding SAN domain!");
		}
	}

	private void DeleteSANDomain(AddCertificateModel cert)
	{
		try
		{
			string selectedDomain = cert.selectedSAN;

			if (!String.IsNullOrWhiteSpace(selectedDomain) && cert.SANdomains.Contains(selectedDomain))
			{
				cert.SANdomains.Remove(selectedDomain);

				// Force the listbox to refresh
				cert.SANs?.Reset();
			}
		}
		catch
		{
			layout?.DisplayToast(MainLayout.toastType.error, "Exception occurred while deleting SAN domain!");
		}
	}

	private async void InstallCertificate(Services.ACME.Certificate cert)
	{
		try
		{
			InstallCertificateModel installCert = new InstallCertificateModel();
			installCert.cert = cert;

			// Clean up domain name
			string domain = cert.MainDomain.ToLower();

			// Trim wildcard from start
			if (domain.StartsWith("*."))
				domain = domain.ReplaceFirst("*.", "");

			string folderPath = $"/etc/acme.sh/{domain}";

			// Append suffix if this is an ECC certificate
			if (cert.KeyLength.Contains("ec"))
				folderPath += "_ecc";

			installCert.rootFolder = folderPath;

			// Generate default values for paths
			installCert.keyFilename = $"{domain}.key";
			installCert.fullChainFilename = $"{domain}.fullchain.cert";

			var result = await DialogService.OpenAsync("Install Certificate", ds =>
	@<RadzenTemplateForm TItem="InstallCertificateModel" Data=@installCert Submit=@(() => InstallCertSubmit(installCert, ref ds))>
		<RadzenFieldset Text="Install Information">
			<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
				<div>
					<RadzenLabel Text="Please enter the root path for the certificate below:" />
					<RadzenTextBox Name="RootPath" @bind-Value=installCert.rootFolder class="w-100" style="display: block" />
					<RadzenRequiredValidator Component="RootPath" Text="Root certificate path is required" Popup=false Style="position: absolute" />
				</div>
				<div>
					<RadzenLabel Text="Please enter the certificate key filename below:" />
					<RadzenTextBox Name="KeyFilename" @bind-Value=installCert.keyFilename class="w-100" style="display: block" />
					<RadzenRequiredValidator Component="KeyFilename" Text="Certificate key filename is required" Popup=false Style="position: absolute" />
				</div>
				<div>
					<RadzenLabel Text="Please enter the certificate full chain filename below:" />
					<RadzenTextBox Name="FullChainFilename" @bind-Value=installCert.fullChainFilename class="w-100" style="display: block" />
					<RadzenRequiredValidator Component="FullChainFilename" Text="Certificate full chain filename is required" Popup=false Style="position: absolute" />
				</div>
				<div>
					<RadzenLabel Text="Please enter the reload command below (optional):" />
					<RadzenTextBox Name="ReloadCmd" @bind-Value=installCert.reloadCmd class="w-100" style="display: block" />
				</div>
				<div class="rz-text-align-left rz-mt-3">
					<RadzenCheckBox @bind-Value=installCert.reloadNginx Name="chkReloadNginx" />
					<RadzenLabel Text="Reload Nginx (On Renewals)" Component="chkReloadNginx" Style="margin-left: 8px; vertical-align: middle;" />
				</div>
				<div class="rz-text-align-left rz-mb-5">
					<RadzenCheckBox @bind-Value=installCert.exportToPFX Name="chkExportPFX" />
					<RadzenLabel Text="Export to PFX" Component="chkExportPFX" Style="margin-left: 8px; vertical-align: middle;" />
					<RadzenLabel Text="PFX password:" Style="margin-left: 50px; vertical-align: middle;" />
					<RadzenTextBox @bind-Value=installCert.PFXpassword class="w-20" />
				</div>
				<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
					<RadzenButton Text="Ok" ButtonType="ButtonType.Submit" Style="width: 80px;" />
					<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
				</RadzenStack>
			</RadzenStack>
		</RadzenFieldset>
	</RadzenTemplateForm>
	);
		}
		catch
		{
			layout?.DisplayToast(MainLayout.toastType.error, "Exception occurred while displaying install certificate screen!");
		}
	}

	private void InstallCertSubmit(InstallCertificateModel installCert, ref DialogService ds)
	{
		try
		{
			// Validate PFX password if export PFX was checked
			if (installCert.exportToPFX && String.IsNullOrWhiteSpace(installCert.PFXpassword))
			{
				layout?.DisplayToast(MainLayout.toastType.error, "PFX export was selected, password must be specified!");
				return;
			}

			// Build list of domains portion of the command
			string domainsCmd = $"-d {installCert.cert!.MainDomain}";
			if (!(installCert.cert.SANDomains == "no"))
			{
				foreach (string domain in installCert.cert.SANDomains.Split(","))
				{
					domainsCmd += $" -d {domain}";
				}
			}
			domainsCmd = domainsCmd.Trim();

			// Generate reload command
			string reloadCmd = string.Empty;

			// PFX export first to make sure it succeeds
			if (installCert.exportToPFX)
				reloadCmd = $"openssl pkcs12 -export -in {installCert.rootFolder}/{installCert.fullChainFilename} -inkey {installCert.rootFolder}/{installCert.keyFilename} -out {installCert.rootFolder}/exported.pfx -passout pass:{installCert.PFXpassword}";

			// Include user specified commands next
			if (!String.IsNullOrWhiteSpace(installCert.reloadCmd))
			{
				if (!String.IsNullOrWhiteSpace(reloadCmd))
					reloadCmd += " && ";

				reloadCmd += installCert.reloadCmd;
			}

			// Include reload last in case it fails
			if (installCert.reloadNginx)
			{
				if (!String.IsNullOrWhiteSpace(reloadCmd))
					reloadCmd += " & ";

				reloadCmd += "service nginx force-reload";
			}

			installCert.reloadCmd = reloadCmd;

			// Make sure destination root folder exists first before continuing
			if (!Directory.Exists(installCert.rootFolder))
				Directory.CreateDirectory(installCert.rootFolder);

			// First, attempt to install the certificate
			if (acme.InstallCertificate(domainsCmd, installCert.rootFolder, installCert.keyFilename, installCert.fullChainFilename, installCert.reloadCmd))
			{
				layout?.DisplayToast(MainLayout.toastType.success, "Certificate installed successfully!");
				RefreshCertificates(false);
				ds.Close(true);
			}
			else
				layout?.DisplayToast(MainLayout.toastType.error, "Failed to install certificate!");
		}
		catch
		{
			layout?.DisplayToast(MainLayout.toastType.error, "Exception occurred while installing certificate!");
		}
	}
}