@page "/certificates"

@inject DialogService DialogService;
@inject Services.ACME acme;

<PageTitle>Certificates</PageTitle>
<br />
<br />
<h3>Certificates</h3>

@if (acme.Installed)
{
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
		<RadzenButton Click=@(() => RefreshCertificates(true)) Disabled="busyRefreshing" Text="Refresh" Icon="cached" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Info" class="rz-mr-5" />
		<RadzenButton Click=@(() => AddCertificate()) Disabled="busyRefreshing" Text="Add" Icon="add" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Success" />
	</RadzenStack>
	<br />
	<br />

	if (acme.Certificates.Count == 0)
	{
		<span>There are currently no certificates to display.</span>
	}
	else
	{
		foreach (Services.ACME.Certificate cert in acme.Certificates)
		{
			
		}
	}
}
else
{
	<span>This is where certificates will be displayed once ACME has been installed.</span>
}

@code {
	[CascadingParameter]
	private MainLayout? layout { get; set; }

	private bool busyRefreshing = false;

	private async void RefreshCertificates(bool notifyUser)
	{
		try
		{
			busyRefreshing = true;

			await Task.Run(() => acme.RefreshCertificates());

			if (notifyUser)
			{
				layout?.DisplayToast(MainLayout.toastType.info, "Certificates refreshed successfully!");
			}
		}
		finally
		{
			busyRefreshing = false;
			await InvokeAsync(() => StateHasChanged());
		}
	}

	private async void AddCertificate()
	{
		List<string> SANdomains = new List<string>();
		string primaryDomain = string.Empty;
		string PFXpassword = string.Empty;
		bool exportToPFX = false;

		var result = await DialogService.OpenAsync("Add Certificate", ds => @<NginxPanel.Components.AddCertificate SANdomains="@SANdomains" @bind-primaryDomain="primaryDomain" @bind-PFXpassword="PFXpassword" @bind-exportToPFX="exportToPFX" />);

		if (!(result is null) && result)
		{
			// Create new certificate
		}
	}
}