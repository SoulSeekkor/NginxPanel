@page "/certificates"


@using System.Security.Cryptography;
@using System.Security.Cryptography.X509Certificates;
@using System.Text.RegularExpressions;

@inject Services.ACME acme;
@inject DialogService DialogService;

@inject IJSRuntime JSRuntime

<PageTitle>Nginx Panel - Certificates</PageTitle>

@if (acme.Installed)
{
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" Style="margin-bottom: 20px;">
		<RadzenButton Click=@(() => RefreshCertificates(true)) Disabled="busyRefreshing" Text="Refresh" Icon="cached" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Info" class="rz-mr-5" />
		<RadzenButton Click=@(() => AddCertificate()) Disabled="busyRefreshing" Text="Add" Icon="add" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Success" />
	</RadzenStack>

	if (acme.Certificates.Count == 0)
	{
		<span>There are currently no certificates to display.</span>
	}
	else
	{
		foreach (Services.ACME.Certificate cert in acme.Certificates)
		{
			<RadzenCard Class="rz-my-8" Style="max-width: 550px">
				<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
					<RadzenStack Gap="0">
						<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Main Domain</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1"><b>@cert.MainDomain</b></RadzenText>
						@if (!String.IsNullOrWhiteSpace(cert.SANDomains))
						{
							<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">SAN Domains</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1"><b>@cert.SANDomains</b></RadzenText>
						}
					</RadzenStack>
				</RadzenStack>
				<RadzenCard class="rz-background-color-primary-light rz-shadow-0 rz-border-radius-0 rz-p-5" style="margin: 0.5rem;">
					<RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>More Details</strong></RadzenText>
					<RadzenRow>
						<RadzenColumn>
							<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">API</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.API</b></RadzenText>
						</RadzenColumn>
					</RadzenRow>
					<RadzenRow RowGap="0">
						<RadzenColumn SizeSM="8">
							<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Key Length</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.KeyLength</b></RadzenText>
							<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Webroot</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Webroot</b></RadzenText>
						</RadzenColumn>
						@if (cert.Created.HasValue)
						{
							<RadzenColumn SizeSM="4">
								<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Created</RadzenText>
								<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Created?.ToString("M/d/yyyy h:mm tt")</b></RadzenText>
								<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Renew</RadzenText>
								<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Renew?.ToString("M/d/yyyy h:mm tt")</b></RadzenText>
							</RadzenColumn>
						}
					</RadzenRow>
				</RadzenCard>
				<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
					<RadzenStack Orientation="Orientation.Horizontal" style="margin-left: 0.5rem; margin-top: 12px;">
						<RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Text="Install" Click="() => InstallCertificate(cert)" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" />
						<RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Text="Export" Click="() => ExportToPFX(cert)" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" />
						<RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Text="Force Renew" Click="() => ForceRenewCertificate(cert)" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" />
						<RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Text="Details" Click="() => ViewCertificateDetails(cert)" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" />
					</RadzenStack>
					<RadzenButton Variant="Variant.Text" Click="() => DeleteCertificate(cert)" Icon="delete" Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Danger" style="margin: -5px;" />
				</RadzenStack>
			</RadzenCard>
		}
	}
}
else
{
	<span>This is where certificates will be displayed once ACME has been installed.</span>
}

@code {
	[CascadingParameter]
	private MainLayout? layout { get; set; }

	private bool busyRefreshing = false;

	private string fqdnRegEx = @"^(?=^.{1,254}$)(^(?:(?!\.|-)([a-z0-9\-\*]{1,63}|([a-z0-9\-]{1,62}[a-z0-9]))\.)+(?:[a-z]{2,})$)$";

	private async void RefreshCertificates(bool notifyUser)
	{
		try
		{
			busyRefreshing = true;

			await Task.Run(() => acme.RefreshCertificates());

			if (notifyUser)
			{
				await layout!.DisplayToastAsync(MainLayout.toastType.info, "Certificates refreshed successfully!");
			}
		}
		finally
		{
			busyRefreshing = false;
			await InvokeAsync(() => StateHasChanged());
		}
	}

	private class AddCertificateModel
	{
		public string CA = string.Empty;
		public string primaryDomain = string.Empty;

		// SAN listbox related variables
		public RadzenListBox<string>? SANs = null;
		public List<string> SANdomains = new List<string>();
		public string selectedSAN = string.Empty;
		public string newSANdomain = string.Empty;
	}

	private class InstallCertificateModel
	{
		public Services.ACME.Certificate? cert = null;

		public string rootFolder = string.Empty;
		public string keyFilename = string.Empty;
		public string fullChainFilename = string.Empty;
		public bool reloadNginx = true;
		public string reloadCmd = string.Empty;

		// PFX related variables
		public bool exportToPFX = false;
		public string PFXpassword = string.Empty;
	}

	private async void CopyToClipboard(string name, string value)
	{
		try
		{
			await JSRuntime.InvokeAsync<string>("clipboardCopy", value);
			await layout!.DisplayToastAsync(MainLayout.toastType.success, name + " copied to the clipboard successfully!");
		}
		catch
		{
			await layout!.DisplayToastAsync(MainLayout.toastType.error, $"Failed to copy {name} to the clipboard!");
		}
	}

	private async void DeleteCertificate(Services.ACME.Certificate cert)
	{
		string message = layout!.StyleMessage(MainLayout.toastType.success, $"Are you sure you want to delete certificate %ss%{cert.MainDomain}%se%?");
		bool? confirm = await DialogService.Confirm(message, "Delete Certificate", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

		if (confirm.HasValue && confirm.Value)
		{
			await Task.Run(() =>
			{
				if (acme.DeleteCertificate(cert))
				{
					layout?.DisplayToastAsync(MainLayout.toastType.success, $"Certificate %ss%{cert.MainDomain}%se% has been deleted!");
					RefreshCertificates(false);
				}
				else
					layout?.DisplayToastAsync(MainLayout.toastType.error, "Failed to delete certificate %ss%{cert.MainDomain}%se%!");
			});
		}
	}

	private async void ForceRenewCertificate(Services.ACME.Certificate cert)
	{
		string message = layout!.StyleMessage(MainLayout.toastType.success, $"Are you sure you want to force renewal for certificate %ss%{cert.MainDomain}%se%?");
		bool? confirm = await DialogService.Confirm(message, "Renew Certificate", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

		if (confirm.HasValue && confirm.Value)
		{
			await Task.Run(() =>
			{
				string response = string.Empty;

				if (acme.ForceRenewCertificate(cert, ref response))
				{
					layout?.DisplayToastAsync(MainLayout.toastType.success, $"Certificate %ss%{cert.MainDomain}%se% has been renewed!");
					RefreshCertificates(false);
				}
				else
					layout?.DisplayToastAsync(MainLayout.toastType.error, $"Failed to force certificate renewal for %ss%{cert.MainDomain}%se%: {response}");
			});

		}
	}

	private async void ExportToPFX(Services.ACME.Certificate cert)
	{
		string pfxPath = Path.Combine(new System.IO.FileInfo(cert.RealKeyPath).DirectoryName!, "exported.pfx");
		string pfxPass = string.Empty;
		var result = await DialogService.OpenAsync("Export Certificate to PFX", ds =>
	@<RadzenStack Gap="1.5rem">
		<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Please enter the path to export to (defaults to certificate folder, overwrites existing):</RadzenText>
		<RadzenTextBox @bind-Value=@pfxPath class="w-100" />
		<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Please enter the PFX password:</RadzenText>
		<RadzenTextBox @bind-Value=@pfxPass class="w-100" />
		<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
			<RadzenStack Orientation="Orientation.Horizontal">
				<RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
				<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
			</RadzenStack>
		</RadzenStack>
	</RadzenStack>
	);

		if (!(result is null) && result)
		{
			if (String.IsNullOrWhiteSpace(pfxPath))
			{
				await layout!.DisplayToastAsync(MainLayout.toastType.error, "Export path cannot be blank!");
				return;
			}

			if (String.IsNullOrWhiteSpace(pfxPass))
			{
				await layout!.DisplayToastAsync(MainLayout.toastType.error, "PFX password cannot be blank!");
				return;
			}

			try
			{
				X509Certificate2 pfxCert = X509Certificate2.CreateFromPemFile(cert.RealFullChainPath, cert.RealKeyPath);

				System.IO.FileInfo pfxFile = new System.IO.FileInfo(pfxPath);

				if (!Directory.Exists(pfxFile.DirectoryName))
					Directory.CreateDirectory(pfxFile.DirectoryName!);

				File.WriteAllBytes(pfxFile.FullName, pfxCert.Export(X509ContentType.Pfx, pfxPass));

				await layout!.DisplayToastAsync(MainLayout.toastType.success, $"Certificate %ss%{cert.MainDomain}%se% successfully exported!");
			}
			catch
			{
				await layout!.DisplayToastAsync(MainLayout.toastType.error, $"Failed to export certificate %ss%{cert.MainDomain}%se%!");
			}
		}
	}

	private async void ViewCertificateDetails(Services.ACME.Certificate cert)
	{
		await DialogService.OpenAsync("Certificate Details", ds =>
			@<RadzenCard Class="rz-my-8" Style="max-width: 550px">
				<RadzenRow>
					<RadzenColumn>
						<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Main Domain</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1"><b>@cert.MainDomain</b></RadzenText>
					</RadzenColumn>
				</RadzenRow>
				<RadzenRow>
				@if (!String.IsNullOrWhiteSpace(cert.SANDomains))
				{
					<RadzenColumn>
						<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">SAN Domains</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1"><b>@cert.SANDomains</b></RadzenText>
					</RadzenColumn>
				}
				</RadzenRow>
				@if (cert.Installed)
				{
					<RadzenRow>
						<RadzenColumn>
							<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Real Key Path</RadzenText>
							<RadzenRow>
								<RadzenText TextStyle="TextStyle.Body1"><b>@cert.RealKeyPath</b></RadzenText>
								<RadzenButton Click="@(() => CopyToClipboard("Real key path", cert.RealKeyPath))" Icon="content_copy" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Dark" Style="float: right;" />
							</RadzenRow>
						</RadzenColumn>
					</RadzenRow>
					<RadzenRow>
						<RadzenColumn>
							<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Real Full Chain Path</RadzenText>
							<RadzenRow>
								<RadzenText TextStyle="TextStyle.Body1"><b>@cert.RealFullChainPath</b></RadzenText>
								<RadzenButton Click="@(() => CopyToClipboard("Real full chain path", cert.RealFullChainPath))" Icon="content_copy" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Dark" Style="float: right;" />
							</RadzenRow>
						</RadzenColumn>
					</RadzenRow>
				}
				<RadzenRow>
					<RadzenColumn>
						<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">API</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.API</b></RadzenText>
					</RadzenColumn>
				</RadzenRow>
				<RadzenRow RowGap="0">
					<RadzenColumn SizeSM="8">
						<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Key Length</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.KeyLength</b></RadzenText>
						<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Webroot</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Webroot</b></RadzenText>
					</RadzenColumn>
					@if (cert.Created.HasValue)
					{
						<RadzenColumn SizeSM="4">
							<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Created</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Created?.ToString("M/d/yyyy h:mm tt")</b></RadzenText>
							<RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Renew</RadzenText>
							<RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@cert.Renew?.ToString("M/d/yyyy h:mm tt")</b></RadzenText>
						</RadzenColumn>
					}
				</RadzenRow>
				<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
					<RadzenButton Text="Close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
				</RadzenStack>
			</RadzenCard>
		);
	}

	private async void AddCertificate()
	{
		try
		{
			AddCertificateModel cert = new AddCertificateModel();
			var result = await DialogService.OpenAsync("Add Certificate", ds =>
				@<RadzenTemplateForm TItem="AddCertificateModel" Data=@cert Submit=@(() => AddCertSubmit(cert))>
					<RadzenFieldset Text="Certificate Information">
						<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
							<div>
								<RadzenLabel Text="Certificate authority:" />
								<RadzenDropDown Data=acme.CertAuthorities.ToList() @bind-Value=cert.CA TValue="string" TextProperty="DisplayName" ValueProperty="CmdValue" DisabledProperty="Disabled" class="w-50" style="display: block" />
							</div>
							<div>
								<RadzenLabel Text="Please enter the primary certificate domain:" />
								<RadzenTextBox Name="PrimaryDomain" @bind-Value=cert.primaryDomain class="w-50" style="display: block" />
								<RadzenRequiredValidator Component="PrimaryDomain" Text="Primary domain is required" Popup=false Style="position: absolute" />
								<RadzenRegexValidator Component="PrimaryDomain" Text="Must be a valid domain or wildcard FQDN" Pattern="^(?=^.{1,254}$)(^(?:(?!\.|-)([a-z0-9\-\*]{1,63}|([a-z0-9\-]{1,62}[a-z0-9]))\.)+(?:[a-z]{2,})$)$" Popup=false Style="position: absolute" />
							</div>
							<div>
								<RadzenLabel Text="Please enter the subject alternative domains (SANs):" />
								<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
									<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
										<RadzenTextBox @bind-Value=cert.newSANdomain Style="width: 300px;" />
										<RadzenButton Click=@(() => AddSANDomain(cert)) Icon="add" ButtonStyle="ButtonStyle.Success" class="rz-mb-3" />
									</RadzenStack>
									<RadzenButton Click=@(() => DeleteSANDomain(cert)) Icon="delete" ButtonStyle="ButtonStyle.Danger" class="rz-mb-3" Style="float: right;" />
								</RadzenStack>
								<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
									<RadzenListBox @ref=cert.SANs @bind-Value=cert.selectedSAN Data="@cert.SANdomains" Style="height: 185px;" />
								</RadzenStack>
							</div>
							<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
								<RadzenButton Text="Ok" ButtonType="ButtonType.Submit" Style="width: 80px;" />
								<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
								<RadzenLabel Text="NOTE: Issuing a certificate can take more than a few minutes!" style="margin-left: 20px; width: 250px;" />
							</RadzenStack>
						</RadzenStack>
					</RadzenFieldset>
				</RadzenTemplateForm>
	);
		}
		catch
		{
			await layout!.DisplayToastAsync(MainLayout.toastType.error, "Exception occurred while displaying add certificate screen!");
		}
	}

	private async Task AddCertSubmit(AddCertificateModel cert)
	{
		try
		{
			// Clear CA if it was the default
			AddCertificateModel temp = new AddCertificateModel();
			if (cert.CA == temp.CA)
				cert.CA = string.Empty;

			// Build domain list
			List<string> domains = cert.SANdomains.ToList();
			domains.Insert(0, cert.primaryDomain);

			string result = string.Empty;
			bool success = false;
			await Task.Run(() =>
			{
				layout?.BusyDialog("Issuing (May Take Some Time) ...");

				// First, attempt to issue the certificate
				success = acme.IssueCertificate(domains, cert.CA, ref result);

				// Close the dialog
				DialogService.Close();
			});

			if (success)
			{
				await layout!.DisplayToastAsync(MainLayout.toastType.success, $"Certificate %ss%{cert.primaryDomain}%se% issued successfully!");
				RefreshCertificates(false);
				DialogService.Close(true);
			}
			else
				await layout!.DisplayToastAsync(MainLayout.toastType.error, $"Failed to issue certificate %ss%{cert.primaryDomain}%se%: {result}");
		}
		catch
		{
			await layout!.DisplayToastAsync(MainLayout.toastType.error, $"Exception occurred while adding certificate %ss%{cert.primaryDomain}%se%!");
		}
	}

	private async void AddSANDomain(AddCertificateModel cert)
	{
		try
		{
			string newDomain = cert.newSANdomain;

			if (!String.IsNullOrWhiteSpace(newDomain))
			{
				if (new Regex(fqdnRegEx).IsMatch(newDomain))
				{
					if (!cert.SANdomains.Contains(newDomain))
					{
						cert.SANdomains.Add(newDomain);

						// Force the listbox to refresh
						cert.SANs?.Reset();
					}
					else
						await layout!.DisplayToastAsync(MainLayout.toastType.info, "SAN already exists!");
				}
				else
					await layout!.DisplayToastAsync(MainLayout.toastType.error, $"SAN domain %ss%{cert.newSANdomain}%se% must be a valid FQDN or wildcard!");
			}
		}
		catch
		{
			await layout!.DisplayToastAsync(MainLayout.toastType.error, $"Exception occurred while adding SAN domain %ss%{cert.newSANdomain}%se%!");
		}
	}

	private async void DeleteSANDomain(AddCertificateModel cert)
	{
		try
		{
			string selectedDomain = cert.selectedSAN;

			if (!String.IsNullOrWhiteSpace(selectedDomain) && cert.SANdomains.Contains(selectedDomain))
			{
				cert.SANdomains.Remove(selectedDomain);

				// Force the listbox to refresh
				cert.SANs?.Reset();
			}
		}
		catch
		{
			await layout!.DisplayToastAsync(MainLayout.toastType.error, $"Exception occurred while deleting SAN domain %ss%{cert.selectedSAN}%se%!");
		}
	}

	private async void InstallCertificate(Services.ACME.Certificate cert)
	{
		try
		{
			InstallCertificateModel installCert = new InstallCertificateModel();
			installCert.cert = cert;

			// Clean up domain name
			string domain = cert.MainDomain.ToLower();

			// Trim wildcard from start
			if (domain.StartsWith("*."))
				domain = domain.ReplaceFirst("*.", "");

			string folderPath = $"/etc/acme.sh/{domain}";

			// Append suffix if this is an ECC certificate
			if (cert.KeyLength.Contains("ec"))
				folderPath += "_ecc";

			installCert.rootFolder = folderPath;

			// Generate default values for paths
			installCert.keyFilename = $"{domain}.key";
			installCert.fullChainFilename = $"{domain}.fullchain.cert";

			var result = await DialogService.OpenAsync("Install Certificate", ds =>
				@<RadzenTemplateForm TItem="InstallCertificateModel" Data=@installCert Submit=@(() => InstallCertSubmit(installCert))>
					<RadzenFieldset Text="Install Information">
						<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
							<div>
								<RadzenLabel Text="Please enter the root path for the certificate below:" />
								<RadzenTextBox Name="RootPath" @bind-Value=installCert.rootFolder class="w-100" style="display: block" />
								<RadzenRequiredValidator Component="RootPath" Text="Root certificate path is required" Popup=false Style="position: absolute" />
							</div>
							<div>
								<RadzenLabel Text="Please enter the certificate key filename below:" />
								<RadzenTextBox Name="KeyFilename" @bind-Value=installCert.keyFilename class="w-100" style="display: block" />
								<RadzenRequiredValidator Component="KeyFilename" Text="Certificate key filename is required" Popup=false Style="position: absolute" />
							</div>
							<div>
								<RadzenLabel Text="Please enter the certificate full chain filename below:" />
								<RadzenTextBox Name="FullChainFilename" @bind-Value=installCert.fullChainFilename class="w-100" style="display: block" />
								<RadzenRequiredValidator Component="FullChainFilename" Text="Certificate full chain filename is required" Popup=false Style="position: absolute" />
							</div>
							<div>
								<RadzenLabel Text="Please enter the reload command below (optional):" />
								<RadzenTextBox Name="ReloadCmd" @bind-Value=installCert.reloadCmd class="w-100" style="display: block" />
							</div>
							<div class="rz-text-align-left rz-mt-3">
								<RadzenCheckBox @bind-Value=installCert.reloadNginx Name="chkReloadNginx" />
								<RadzenLabel Text="Reload Nginx (On Renewals)" Component="chkReloadNginx" Style="margin-left: 8px; vertical-align: middle;" />
							</div>
							<div class="rz-text-align-left rz-mb-5">
								<RadzenCheckBox @bind-Value=installCert.exportToPFX Name="chkExportPFX" />
								<RadzenLabel Text="Export to PFX" Component="chkExportPFX" Style="margin-left: 8px; vertical-align: middle;" />
								<RadzenLabel Text="PFX password:" Style="margin-left: 50px; vertical-align: middle;" />
								<RadzenTextBox @bind-Value=installCert.PFXpassword class="w-20" />
							</div>
							<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
								<RadzenButton Text="Ok" ButtonType="ButtonType.Submit" Style="width: 80px;" />
								<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
							</RadzenStack>
						</RadzenStack>
					</RadzenFieldset>
				</RadzenTemplateForm>
			);
		}
		catch
		{
			await layout!.DisplayToastAsync(MainLayout.toastType.error, $"Exception occurred while displaying install certificate screen for %ss%{cert.MainDomain}%se%!");
		}
	}

	private async Task InstallCertSubmit(InstallCertificateModel installCert)
	{
		try
		{
			// Validate PFX password if export PFX was checked
			if (installCert.exportToPFX && String.IsNullOrWhiteSpace(installCert.PFXpassword))
			{
				await layout!.DisplayToastAsync(MainLayout.toastType.error, "PFX export was selected, password must be specified!");
				return;
			}

			// Build list of domains portion of the command
			string domainsCmd = $"-d {installCert.cert!.MainDomain}";
			if (!(installCert.cert.SANDomains == "no"))
			{
				foreach (string domain in installCert.cert.SANDomains.Split(","))
				{
					domainsCmd += $" -d {domain}";
				}
			}
			domainsCmd = domainsCmd.Trim();

			// Generate reload command
			string reloadCmd = string.Empty;

			// PFX export first to make sure it succeeds
			if (installCert.exportToPFX)
				reloadCmd = $"openssl pkcs12 -export -in {installCert.rootFolder}/{installCert.fullChainFilename} -inkey {installCert.rootFolder}/{installCert.keyFilename} -certfile {Path.Combine(installCert.cert.RootPath, "ca.cer")} -out {installCert.rootFolder}/exported.pfx -passout pass:{installCert.PFXpassword}";

			// Include user specified commands next
			if (!String.IsNullOrWhiteSpace(installCert.reloadCmd))
			{
				if (!String.IsNullOrWhiteSpace(reloadCmd))
					reloadCmd += " && ";

				reloadCmd += installCert.reloadCmd;
			}

			// Include reload last in case it fails
			if (installCert.reloadNginx)
			{
				if (!String.IsNullOrWhiteSpace(reloadCmd))
					reloadCmd += " & ";

				reloadCmd += "service nginx force-reload";
			}

			// Make sure destination root folder exists first before continuing
			if (!Directory.Exists(installCert.rootFolder))
				Directory.CreateDirectory(installCert.rootFolder);

			// First, attempt to install the certificate
			string result = string.Empty;
			bool success = false;
			await Task.Run(() =>
			{
				layout?.BusyDialog("Installing ...");

				// First, attempt to issue the certificate
				success = acme.InstallCertificate(domainsCmd, installCert.rootFolder, installCert.keyFilename, installCert.fullChainFilename, reloadCmd, ref result);

				// Close the dialog
				DialogService.Close();
			});

			if (success)
			{
				await layout!.DisplayToastAsync(MainLayout.toastType.success, $"Certificate %ss%{installCert.cert!.MainDomain}%se% installed successfully!");
				RefreshCertificates(false);
				DialogService.Close(true);
			}
			else
				await layout!.DisplayToastAsync(MainLayout.toastType.error, $"Failed to install certificate %ss%{installCert.cert!.MainDomain}%se%: {result}");
		}
		catch
		{
			await layout!.DisplayToastAsync(MainLayout.toastType.error, "Exception occurred while installing certificate %ss%{installCert.cert!.MainDomain}%se%!");
		}
	}
}