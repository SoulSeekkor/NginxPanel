@page "/certificates"

@inject DialogService DialogService;
@inject Services.ACME acme;

<PageTitle>Certificates</PageTitle>
<br />
<br />
<h3>Certificates</h3>

@if (acme.Installed)
{
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
		<RadzenButton Click=@(() => RefreshCertificates(true)) Disabled="busyRefreshing" Text="Refresh" Icon="cached" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Info" class="rz-mr-5" />
		<RadzenButton Click=@(() => AddCertificate()) Disabled="busyRefreshing" Text="Add" Icon="add" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Success" />
	</RadzenStack>
	<br />
	<br />

	if (acme.Certificates.Count == 0)
	{
		<span>There are currently no certificates to display.</span>
	}
	else
	{
		foreach (Services.ACME.Certificate cert in acme.Certificates)
		{
			
		}
	}
}
else
{
	<span>This is where certificates will be displayed once ACME has been installed.</span>
}

@code {
	[CascadingParameter]
	private MainLayout? layout { get; set; }

	private bool busyRefreshing = false;

	private async void RefreshCertificates(bool notifyUser)
	{
		try
		{
			busyRefreshing = true;

			await Task.Run(() => acme.RefreshCertificates());

			if (notifyUser)
			{
				layout?.DisplayToast(MainLayout.toastType.info, "Certificates refreshed successfully!");
			}
		}
		finally
		{
			busyRefreshing = false;
			await InvokeAsync(() => StateHasChanged());
		}
	}

	private class CertificateModel
	{
		public string primaryDomain = string.Empty;

		// SAN listbox related variables
		public RadzenListBox<string>? SANs = null;
		public List<string> SANdomains = new List<string>();
		public string selectedSAN = string.Empty;
		public string newSANdomain = string.Empty;

		// PFX related variables
		public bool exportToPFX = false;
		public string PFXpassword = string.Empty;
	}

	private async void AddCertificate()
	{
		CertificateModel certificateModel = new CertificateModel();
		var result = await DialogService.OpenAsync("Add Certificate", ds =>
	@<RadzenTemplateForm TItem="CertificateModel" Data=@certificateModel Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
		<RadzenFieldset Text="Certificate Information">
			<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
				<div>
					<RadzenLabel Text="Please enter the primary certificate domain:" />
					<RadzenTextBox Name="PrimaryDomain" @bind-Value=certificateModel.primaryDomain class="w-50" style="display: block" />
					<RadzenRequiredValidator Component="PrimaryDomain" Text="Primary domain is required" Popup=false Style="position: absolute" />
					<RadzenRegexValidator Component="PrimaryDomain" Text="Must be a valid domain or wildcard FQDN" Pattern="^(?=^.{1,254}$)(^(?:(?!\.|-)([a-z0-9\-\*]{1,63}|([a-z0-9\-]{1,62}[a-z0-9]))\.)+(?:[a-z]{2,})$)$" Popup=false Style="position: absolute" />
				</div>
				<div>
					<RadzenLabel Text="Please enter the subject alternative domains (SANs):" />
					<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
							<RadzenTextBox @bind-Value=certificateModel.newSANdomain Style="width: 300px;" />
							<RadzenButton Click=@(() => AddSAN(certificateModel.SANdomains, certificateModel.newSANdomain, certificateModel.SANs)) Icon="add" ButtonStyle="ButtonStyle.Success" class="rz-mb-3" />
						</RadzenStack>
						<RadzenButton Click=@(() => DeleteSAN(certificateModel.SANdomains, certificateModel.selectedSAN, certificateModel.SANs)) Icon="delete" ButtonStyle="ButtonStyle.Danger" class="rz-mb-3" Style="float: right;" />
					</RadzenStack>
					<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenListBox @ref=certificateModel.SANs @bind-Value=certificateModel.selectedSAN Data="@certificateModel.SANdomains" Style="height: 185px;" />
					</RadzenStack>
				</div>
				<span class="rz-text-align-left rz-mt-3 rz-mb-5">
					<RadzenCheckBox @bind-Value=certificateModel.exportToPFX Name="chkExportPFX" />
					<RadzenLabel Text="Export to PFX" Component="chkExportPFX" Style="margin-left: 8px; vertical-align: middle;" />
					<RadzenLabel Text="PFX password:" Style="margin-left: 50px; vertical-align: middle;" />
					<RadzenTextBox @bind-Value=certificateModel.PFXpassword class="w-20" />
				</span>
				<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left">
					<RadzenButton Text="Ok" ButtonType="ButtonType.Submit" Style="width: 80px;" />
					<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
				</RadzenStack>
			</RadzenStack>
		</RadzenFieldset>
	</RadzenTemplateForm>
	);
	}

	void OnSubmit(CertificateModel certificateModel)
	{
		//console.Log($"Submit: {JsonSerializer.Serialize(model, new JsonSerializerOptions() { WriteIndented = true })}");

		// Create new certificate

		// Validate domain names
		if (System.Uri.CheckHostName(certificateModel.primaryDomain) == UriHostNameType.Unknown)
		{
			layout?.DisplayToast(MainLayout.toastType.error, "Invalid primary domain was specified!");
			return;
		}

		// Validate PFX password if export PFX was checked
		if (certificateModel.exportToPFX && String.IsNullOrWhiteSpace(certificateModel.PFXpassword))
		{
			layout?.DisplayToast(MainLayout.toastType.error, "PFX export was selected, password must be specified!");
			return;
		}
	}

	void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
	{
		layout?.DisplayToast(MainLayout.toastType.error, "Invalid submission!");
		//console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
	}

	private void AddSAN(List<string> domains, string addSANdomain, RadzenListBox<string>? SANs)
	{
		if (!String.IsNullOrWhiteSpace(addSANdomain))
		{
			if (!domains.Contains(addSANdomain))
			{
				domains.Add(addSANdomain);

				// Force the listbox to refresh
				SANs?.Reset();
			}
			else
				layout?.DisplayToast(MainLayout.toastType.info, "SAN already exists!");
		}
	}

	private void DeleteSAN(List<string> domains, string selectedSAN, RadzenListBox<string>? SANs)
	{
		if (!String.IsNullOrWhiteSpace(selectedSAN) && domains.Contains(selectedSAN))
		{
			domains.Remove(selectedSAN);

			// Force the listbox to refresh
			SANs?.Reset();
		}
	}
}