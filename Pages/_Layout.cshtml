@using Microsoft.AspNetCore.Components.Web
@namespace NginxPanel.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="content/css/bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="content/css/site.css" />
    <link rel="stylesheet" href="NginxPanel.styles.css" />

    <!-- custom styling -->
    <link rel="stylesheet" href="content/css/theme.css" />
    <link rel="stylesheet" href="content/css/collapsible.css" />
    <link rel="stylesheet" href="content/css/buttons.css" />
    <link rel="stylesheet" href="content/css/layout.css" />
    <link rel="stylesheet" href="content/font-awesome/css/all.min.css" />
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/dark-base.css" />
    
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <script src="content/scripts/clipboard.min.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script>
        new ClipboardJS('.clip');

        function notify(type, message, timeout) {
            type = type || "default";
            timeout = timeout || 2;

            switch (type) {
                case "warning":
                    alertify.warning(message, timeout);
                    break;
                case "success":
                    alertify.success(message, timeout);
                    break;
                case "error":
                    alertify.error(message, timeout);
                    break;
                default:
                    alertify.message(message, timeout);
            }
        }

        function ask(type, message) {
            var icon = '';

            switch (type) {
                case "warning":
                    icon = 'exclamation-triangle';
                    break;
                case "question":
                    icon = "question";
                    break;
            }

            message = "<span style='font-size: 16px;'>" + message + "</span>";

            if (icon != '')
                message = "<i style='padding-right: 30px; font-size: 32px;' class='fa fa-" + icon + "'></i>" + message;

            return new Promise((resolve, reject) => {
                alertify.confirm(message, function () {
                    resolve(true);
                }, function () {
                    resolve(false);
                }).autoCancel(15).set({ labels: { ok: 'Yes', cancel: 'No' }, resizable: true, defaultFocus: 'cancel' }).setHeader('Confirm').resizeTo(650, 200)
            });
        }
    </script>
</body>
</html>
