@page "/settings"

@using static Services.ACME.ConfigFile;

@inject Services.ACME acme;
@inject Services.CLI cli;
@inject Services.Nginx nginx;
@inject DialogService DialogService;

<PageTitle>Nginx Panel - Settings</PageTitle>

<RadzenStack Orientation="Orientation.Vertical">
	<RadzenCard Style="width: 500px;">
		<RadzenText Text="Nginx Settings" TextStyle="TextStyle.DisplayH6" />
		<hr style="margin-bottom: 25px;" />
		<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
			@if (!nginx.Installed)
			{
				<span>Install Nginx, gives the option of package manager (not recommended), stable or mainline:</span>
				<RadzenButton Click=@(() => InstallNginx()) Disabled="busyInstallReset" Text="Install Nginx" Icon="cached" BusyText="Installing..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
			}
			else
			{	
				<RadzenRow AlignItems="AlignItems.Start" Style="width: 100%;">
					<RadzenColumn SizeSM="6">
						<span>Uninstall Nginx:</span>
						<br />
						<RadzenButton Click=@(() => UninstallNginx()) Disabled="busyInstallReset" Text="Uninstall Nginx" Icon="cached" BusyText="Uninstalling..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
					</RadzenColumn>
					<RadzenColumn>
						<span>Upgrade Nginx:</span>
						<br />
						<RadzenButton Click=@(() => UpgradeNginx()) Disabled="busyInstallReset" Text="Upgrade Nginx" Icon="cached" BusyText="Upgrading..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Success" />
					</RadzenColumn>
				</RadzenRow>
				<span>Reset Nginx by reinstalling (includes configs):</span>
				<RadzenButton Click=@(() => ResetNginx()) Disabled="true" Text="Reset Nginx" Icon="cached" BusyText="Resetting..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
			}
		</RadzenStack>
	</RadzenCard>

	<RadzenCard Style="width: 500px;">
		<RadzenText Text="ACME Settings" TextStyle="TextStyle.DisplayH6" />
		<hr style="margin-bottom: 25px;" />
		<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
			@if (!acme.Installed)
			{
				<span>Install ACME:</span>
				<RadzenButton Click=@(() => InstallACME()) Disabled="busyInstallReset" Text="Install ACME" Icon="cached" BusyText="Installing..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
			}
			else
			{
				<RadzenRow AlignItems="AlignItems.Start" Style="width: 100%;">
					<RadzenColumn SizeSM="6">
						<span>Uninstall ACME:</span>
						<br />
						<RadzenButton Click=@(() => UninstallACME()) Disabled="busyInstallReset" Text="Uninstall ACME" Icon="cached" BusyText="Uninstalling..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
					</RadzenColumn>
					<RadzenColumn>
						<span>Upgrade ACME:</span>
						<br />
						<RadzenButton Click=@(() => UpgradeACME()) Disabled="busyInstallReset" Text="Upgrade ACME" Icon="cached" BusyText="Upgrading..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Success" />
					</RadzenColumn>
				</RadzenRow>
				<span>Set ACME Cloudflare Token:</span>
				<RadzenButton Click=@(() => SetACMECloudflareToken()) Disabled="busyInstallReset" Text="Set Token" Icon="cached" BusyText="Setting..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Secondary" />				
				<span>Set ACME CA:</span>
				<RadzenButton Click=@(() => SetACMECertAuthority()) Disabled="busyInstallReset" Text="Set CA" Icon="cached" BusyText="Setting..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Secondary" />

				<span>Set ACME Email Notifications:</span>
				<RadzenCheckBox TValue="bool" Value="!(acme.AccountConf.GetConfValue(enuConfKey.NOTIFY_HOOK) == string.Empty)" Disabled="acme.AccountConf.GetConfValue(enuConfKey.SAVED_SMTP_HOST) == string.Empty || busyInstallReset" Name="NotifyHookSMTP" Change="() => ToggleACMENotifyHook()" />
				<RadzenLabel Text="Enable SMTP Notify" Component="NotifyHookSMTP" />
				<RadzenButton Click=@(() => SetACMEEmailNotifications()) Disabled="busyInstallReset" Text="Set SMTP" Icon="cached" BusyText="Setting..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Secondary" />
			}
		</RadzenStack>
	</RadzenCard>
</RadzenStack>

@code {
	[CascadingParameter]
	private MainLayout? layout { get; set; }

	private bool busyInstallReset = false;

	private void ResetNginx()
	{
		//busyInstallReset = true;

		//cli.RunCommand("sudo", "apt purge nginx nginx-common nginx-full");
		//cli.RunCommand("sudo", "apt install nginx");

		// If all else fails
		//cli.RunCommand("sudo", "dpkg --force-confmiss -i /var/cache/apt/archives/nginx-common_*.deb ");

		//busyInstallReset = false;
	}

	private async void InstallNginx()
	{
		try
		{
			busyInstallReset = true;
			StateHasChanged();

			var result = await DialogService.OpenAsync("Nginx Package", ds =>
				@<RadzenStack Gap="1.5rem">
					<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Please select the Nginx package to use.</RadzenText>
					<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenStack Orientation="Orientation.Horizontal">
							<RadzenButton Text="System Default" Click="@(() => ds.Close(""))" Style="width: 140px;" />
							<RadzenButton Text="Stable" Click="@(() => ds.Close("stable"))" Style="width: 80px;" />
							<RadzenButton Text="Mainline" Click="@(() => ds.Close("mainline"))" Style="width: 80px;" />
						</RadzenStack>
						<RadzenButton Text="Cancel" Click="() => ds.Close()" ButtonStyle="ButtonStyle.Light" Style="float: right;" />
					</RadzenStack>
				</RadzenStack>
			);

			if (!(result is null))
			{
				await Task.Run(() =>
				{
					// Remove existing Nginx first
					cli.RunCommand("apt remove nginx nginx-common nginx-full -y");

					if (!String.IsNullOrWhiteSpace(result))
					{
						// Install dependencies
						cli.RunCommand("apt install software-properties-common -y");

						if (result == "stable")
							cli.RunCommand("add-apt-repository ppa:ondrej/nginx -y");  // Stable
						else if (result == "mainline")
							cli.RunCommand("add-apt-repository ppa:ondrej/nginx-mainline -y");  // Mainline

						cli.RunCommand("apt update");
						cli.RunCommand("apt install nginx-full -y");
					}
					else
					{
						// Remove custom repositories if they exist first
						cli.RunCommand("add-apt-repository --remove ppa:ondrej/nginx -y");
						cli.RunCommand("add-apt-repository --remove ppa:ondrej/nginx-mainline -y");
						cli.RunCommand("apt update");
						cli.RunCommand("apt install nginx -y");  // Default system package
					}
				});

				layout?.DisplayToast(MainLayout.toastType.success, "Nginx installed successfully!");
			}
		}
		finally
		{
			busyInstallReset = false;
			nginx.Refresh();
			StateHasChanged();
			await layout!.InvokeStateHasChanged();
		}
	}

	private async void UninstallNginx()
	{
		try
		{
			busyInstallReset = true;
			StateHasChanged();

			bool? confirm = await DialogService.Confirm("Are you sure you want to uninstall Nginx? This will leave the configuration files behind.", "Uninstall Nginx", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

			if (confirm.HasValue && confirm.Value)
			{
				await Task.Run(() =>
				{
					// Remove existing Nginx first
					cli.RunCommand("apt remove nginx nginx-common nginx-full -y");
					cli.RunCommand("add-apt-repository --remove ppa:ondrej/nginx -y");
					cli.RunCommand("add-apt-repository --remove ppa:ondrej/nginx-mainline -y");
					//cli.RunCommand("apt update");
				});

				layout?.DisplayToast(MainLayout.toastType.success, "Nginx uninstalled successfully!");
			}
		}
		finally
		{
			busyInstallReset = false;
			nginx.Refresh();
			StateHasChanged();
			await layout!.InvokeStateHasChanged();
		}
	}

	private async void UpgradeNginx()
	{
		try
		{
			bool? confirm = await DialogService.Confirm($"Are you sure you want to upgrade Nginx?", "Upgrade Nginx", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

			if (confirm.HasValue && confirm.Value)
			{
				busyInstallReset = true;
				StateHasChanged();

				await Task.Run(() =>
				{
					cli.RunCommand("apt update");
					cli.RunCommand("apt install --only-upgrade nginx-full -y");
				});

				if (cli.StandardOut.Contains("Setting up nginx"))
				{
					layout?.DisplayToast(MainLayout.toastType.success, "Nginx upgraded successfully!");
				}
				else if (cli.StandardOut.Contains("is already the newest version"))
				{
					layout?.DisplayToast(MainLayout.toastType.info, "Nginx already at the latest version!");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, "Nginx failed to upgrade!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			nginx.Refresh();
			StateHasChanged();
			await layout!.InvokeStateHasChanged();
		}
	}

	private async void InstallACME()
	{
		try
		{
			string email = string.Empty;
			var result = await DialogService.OpenAsync("Install ACME", ds =>
				@<RadzenStack Gap="1.5rem">
					<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Please enter the email to register with below:</RadzenText>
					<RadzenTextBox @bind-Value=@email class="w-100" />
					<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenStack Orientation="Orientation.Horizontal">
							<RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
							<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
						</RadzenStack>
					</RadzenStack>
				</RadzenStack>
	);

			bool emailValid = false;

			try
			{
				var test = new System.Net.Mail.MailAddress(email);
				emailValid = true;
			}
			catch
			{
				// Ignore
			}

			if (!emailValid)
			{
				layout?.DisplayToast(MainLayout.toastType.error, "Must enter a valid email for registration!");
				return;
			}

			if (!(result is null) && result)
			{
				busyInstallReset = true;
				StateHasChanged();

				await Task.Run(() =>
				{
					//cli.RunCommand("apt install openssl cron socat curl");  // Potential prerequisite packages
					cli.RunCommand("wget -O acme.sh https://get.acme.sh");
					cli.RunCommand("chmod +x acme.sh");
					cli.RunCommand("bash acme.sh");
				});

				if (cli.StandardOut.Contains("Install success!"))
				{
					await Task.Run(() =>
					{
						cli.RunCommand($"{cli.HomePath}/.acme.sh/acme.sh --register-account -m {email}", sudo: false);
					});

					if (cli.StandardOut.Contains("Registered"))
						layout?.DisplayToast(MainLayout.toastType.success, "ACME installed successfully!");
					else
						layout?.DisplayToast(MainLayout.toastType.error, "ACME failed to register email!");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, "ACME failed to install!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			acme.Refresh();
			StateHasChanged();
		}
	}

	private async void UninstallACME()
	{
		try
		{
			bool? confirm = await DialogService.Confirm($"Are you sure you want to uninstall the ACME script?", "Uninstall ACME", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

			if (confirm.HasValue && confirm.Value)
			{
				busyInstallReset = true;
				StateHasChanged();

				await Task.Run(() =>
				{
					cli.RunCommand($"{cli.HomePath}/.acme.sh/acme.sh --uninstall", sudo: false);
				});

				if (cli.StandardOut.Contains("Uninstalling alias"))
				{
					layout?.DisplayToast(MainLayout.toastType.success, "ACME uninstalled successfully!");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, "ACME failed to uninstall!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			acme.Refresh();
			StateHasChanged();
		}
	}

	private async void UpgradeACME()
	{
		try
		{
			bool autoUpgrade = false;
			var result = await DialogService.OpenAsync("Upgrade ACME", ds =>
				@<RadzenStack>
					<span>Are you sure you want to upgrade the ACME script?</span>
					<span class="rz-text-align-left">
						<RadzenCheckBox @bind-Value=autoUpgrade Name="chkAutoUpgrade" />
						<RadzenLabel Text="Auto Upgrade" Component="chkAutoUpgrade" MouseEnter="@(args => layout?.ShowTooltip(args, "Set to auto upgrade going forward.", new TooltipOptions(){ Position = TooltipPosition.Right }) )" Style="margin-left: 8px; vertical-align: middle;" />
					</span>
					<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenStack Orientation="Orientation.Horizontal">
							<RadzenButton Text="Yes" Click="() => ds.Close(true)" Style="width: 80px;" />
							<RadzenButton Text="No" Click="() => ds.Close(false)" Style="width: 80px;" ButtonStyle="ButtonStyle.Light" />
						</RadzenStack>
					</RadzenStack>
				</RadzenStack>
			);

			if (!(result is null) && result)
			{
				busyInstallReset = true;
				StateHasChanged();

				await Task.Run(() =>
				{
					cli.RunCommand($"{cli.HomePath}/.acme.sh/acme.sh --upgrade --auto-upgrade " + (autoUpgrade ? "1" : "0"), sudo: false);
				});

				if (cli.StandardOut.Contains("Upgrade success!"))
				{
					layout?.DisplayToast(MainLayout.toastType.success, "ACME upgraded successfully! Auto upgrade was " + (autoUpgrade ? "enabled" : "disabled") + ".");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, "ACME failed to upgrade!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			acme.Refresh();
			StateHasChanged();
		}
	}

	private async void SetACMECloudflareToken()
	{
		try
		{
			string token = acme.AccountConf.GetConfValue(enuConfKey.SAVED_CF_Token);

			var result = await DialogService.OpenAsync("Set ACME Cloudflare Token", ds =>
				@<RadzenStack>
					<div>
						<span>Please enter your Cloudflare API token below:</span>
						<RadzenTextBox @bind-Value=@token Style="width: 310px; margin-right: 4px; margin-bottom: 20px;" />
						<!--<RadzenButton Text="Clear" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" />-->
					</div>
					<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenStack Orientation="Orientation.Horizontal">
							<RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
							<RadzenButton Text="Cancel" Click="() => ds.Close(false)" Style="width: 80px;" ButtonStyle="ButtonStyle.Light" />
						</RadzenStack>
					</RadzenStack>
				</RadzenStack>
			);

			if (!(result is null) && result)
			{
				busyInstallReset = true;
				StateHasChanged();

				if (String.IsNullOrWhiteSpace(token))
				{
					bool? confirm = await DialogService.Confirm("Are you sure you want to clear the Cloudflare API token?", "Clear ACME Cloudflare Token", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

					if (confirm.HasValue && !confirm.Value)
						return;
				}

				await Task.Run(() =>
				{
					result = acme.AccountConf.SetConfValue(enuConfKey.SAVED_CF_Token, token);
				});

				if (result)
				{
					layout?.DisplayToast(MainLayout.toastType.success, $"ACME Cloudflare API token {(String.IsNullOrWhiteSpace(token) ? "cleared" : "set")} successfully!");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, $"Failed to {(String.IsNullOrWhiteSpace(token) ? "clear" : "set")} ACME Cloudflare API token!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			StateHasChanged();
		}
	}

	private async void SetACMEEmailNotifications()
	{
		try
		{
			string bin = acme.AccountConf.GetConfValue(enuConfKey.SAVED_SMTP_BIN);
			string host = acme.AccountConf.GetConfValue(enuConfKey.SAVED_SMTP_HOST);
			string secure = acme.AccountConf.GetConfValue(enuConfKey.SAVED_SMTP_SECURE);
			string from = acme.AccountConf.GetConfValue(enuConfKey.SAVED_SMTP_FROM);
			string to = acme.AccountConf.GetConfValue(enuConfKey.SAVED_SMTP_TO);

			#if DEBUG
			host = "10.12.1.16";
			from = "ajenti@soulseekkor.net";
			to = "mewert@soulseekkor.net";
			#endif

			var result = await DialogService.OpenAsync("Set ACME Email Notifications", ds =>
				@<RadzenStack>
					<div>
						<span>Please enter your SMTP server below:</span>
						<br />
						<RadzenTextBox @bind-Value=@host Style="width: 310px; margin-right: 4px;" />
					</div>
					<div>
						<span>Please enter the sender email address below:</span>
						<br />
						<RadzenTextBox @bind-Value=@from Style="width: 310px; margin-right: 4px;" />
					</div>
					<div>
						<span>Please enter the email address to send notifications to below:</span>
						<br />
						<RadzenTextBox @bind-Value=@to Style="width: 310px; margin-right: 4px; margin-bottom: 20px;" />
					</div>
					<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenStack Orientation="Orientation.Horizontal">
							<RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
							<RadzenButton Text="Cancel" Click="() => ds.Close(false)" Style="width: 80px;" ButtonStyle="ButtonStyle.Light" />
						</RadzenStack>
					</RadzenStack>
				</RadzenStack>
			);

			if (!(result is null) && result)
			{
				busyInstallReset = true;
				StateHasChanged();

				if (String.IsNullOrWhiteSpace(host) || String.IsNullOrWhiteSpace(from) || String.IsNullOrWhiteSpace(to))
				{
					layout?.DisplayToast(MainLayout.toastType.error, "All email settings must be entered!");
					return;
				}

				await Task.Run(() =>
				{
					result = acme.AccountConf.SetConfValue(enuConfKey.SAVED_SMTP_BIN, (String.IsNullOrWhiteSpace(bin) ? "python3" : bin)) &&
						acme.AccountConf.SetConfValue(enuConfKey.SAVED_SMTP_HOST, host) &&
						acme.AccountConf.SetConfValue(enuConfKey.SAVED_SMTP_SECURE, (String.IsNullOrWhiteSpace(secure) ? "none" : secure)) &&
						acme.AccountConf.SetConfValue(enuConfKey.SAVED_SMTP_FROM, from) &&
						acme.AccountConf.SetConfValue(enuConfKey.SAVED_SMTP_TO, to);
				});

				if (result)
				{
					layout?.DisplayToast(MainLayout.toastType.success, "ACME email notifications set successfully!");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, "Failed to set ACME email notifications!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			StateHasChanged();
		}
	}

	private async void SetACMECertAuthority()
	{
		try
		{
			string CA = string.Empty;
			string confVal = acme.AccountConf.GetConfValue(enuConfKey.DEFAULT_ACME_SERVER);

			// Check current value
			if (confVal.Contains("zerossl"))
				CA = "zerossl";
			else if (confVal.Contains("letsencrypt"))
			{
				if (confVal.Contains("staging"))
					CA = "letsencrypt_test";
				else
					CA = "letsencrypt";
			}
			else if (confVal.Contains("buypass"))
			{
				if (confVal.Contains("test"))
					CA = "buypass_test";
				else
					CA = "buypass";
			}
			else if (confVal.Contains("sslcom"))
				CA = "sslcom";
			else if (confVal.Contains("goog"))
			{
				if (confVal.Contains("test"))
					CA = "googletest";
				else
					CA = "google";
			}
			else if (!String.IsNullOrWhiteSpace(confVal))
				layout?.DisplayToast(MainLayout.toastType.warning, "Currently set certificate authority is unknown!  Be aware that changing this will overwrite the existing server value.");

			var result = await DialogService.OpenAsync("Set ACME Default Certificate Authority", ds =>
				@<RadzenStack>
					<div>
						<RadzenText Text="Select the CA you would like to use below:" />
						<RadzenRadioButtonList Data="acme.CertAuthorities" @bind-Value=@CA TValue="string" TextProperty="DisplayName" ValueProperty="CmdValue" DisabledProperty="Disabled" Orientation=Orientation.Vertical class="mb-5" />
					</div>
					<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenStack Orientation="Orientation.Horizontal">
							<RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
							<RadzenButton Text="Cancel" Click="() => ds.Close(false)" Style="width: 80px;" ButtonStyle="ButtonStyle.Light" />
						</RadzenStack>
					</RadzenStack>
				</RadzenStack>
			);

			if (!(result is null) && result)
			{
				busyInstallReset = true;
				StateHasChanged();

				await Task.Run(() =>
				{
					result = acme.SetDefaultCA(CA);
				});

				if (result)
				{
					layout?.DisplayToast(MainLayout.toastType.success, "ACME default certificate authority set successfully!");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, "Failed to set ACME default certificate authority!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			StateHasChanged();
		}
	}

	private async void ToggleACMENotifyHook()
	{
		try
		{
			busyInstallReset = true;
			StateHasChanged();

			bool hookEnabled = acme.AccountConf.HasConfValue(enuConfKey.NOTIFY_HOOK);
			bool result = false;
			await Task.Run(() =>
			{
				result = acme.AccountConf.SetConfValue(enuConfKey.NOTIFY_HOOK, hookEnabled ? "" : "smtp");
			});

			if (result)
			{
				layout?.DisplayToast(MainLayout.toastType.success, $"ACME SMTP notify hook {(hookEnabled ? "cleared" : "set")} successfully!");
			}
			else
			{
				layout?.DisplayToast(MainLayout.toastType.error, $"Failed to {(hookEnabled ? "clear" : "set")} ACME SMTP notify hook!");
			}
		}
		finally
		{
			busyInstallReset = false;
			StateHasChanged();
		}
	}
}
