@page "/settings"

@inject DialogService DialogService;
@inject Services.ACME acme;
@inject Services.CLI cli;
@inject Services.Nginx nginx;

<PageTitle>Settings</PageTitle>
<br />
<br />
<h3>Settings</h3>
<br />
<br />
Install or reinstall Nginx, leaves configs and gives the option of stable or mainline:
<br />
<RadzenButton Click=@(() => InstallNginx()) Disabled="busyInstallReset" Text="@installText" Icon="cached" BusyText="Installing..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
<br />
<br />
Reset Nginx by reinstalling (includes configs):
<br />
<RadzenButton Click=@(() => ResetNginx()) Disabled="true" Text="Reset Nginx" Icon="cached" BusyText="Resetting..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
<br />
<br />
Install ACME:
<br />
<RadzenButton Click=@(() => InstallACME()) Text="Install ACME" Icon="cached" BusyText="Installing..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />

@code {
	[CascadingParameter]
	private MainLayout? layout { get; set; }

	string installText = "Install Nginx";

	private bool busyInstallReset = false;

	protected override void OnInitialized()
	{
		if (nginx.Installed)
		{
			installText = "Reinstall Nginx";
		}
	}

	private void ResetNginx()
	{
		//busyInstallReset = true;

		//cli.RunCommand("sudo", "apt purge nginx nginx-common nginx-full");
		//cli.RunCommand("sudo", "apt install nginx");

		// If all else fails
		//cli.RunCommand("sudo", "dpkg --force-confmiss -i /var/cache/apt/archives/nginx-common_*.deb ");

		//busyInstallReset = false;
	}

	private void InstallNginx()
	{
		busyInstallReset = true;

		StateHasChanged();

		// Remove existing Nginx first
		cli.RunCommand("sudo", "apt remove nginx nginx-common nginx-full -y");

		cli.RunCommand("sudo", "apt install software-properties-common -y");
		//cli.RunCommand("sudo", "add-apt-repository ppa:ondrej/nginx -y");  // Stable
		cli.RunCommand("sudo", "add-apt-repository ppa:ondrej/nginx-mainline -y");  // Mainline
		cli.RunCommand("sudo", "apt update");
		cli.RunCommand("sudo", "apt install nginx-full -y");

		layout?.ShowNotification(NotificationSeverity.Success, "Success", $"Nginx installed successfully!");

		busyInstallReset = false;

		nginx.Refresh();

		StateHasChanged();
	}

	private async void InstallACME()
	{
		try
		{
			bool? confirm = await DialogService.Confirm($"Are you sure you want to install the ACME script?", "Install ACME", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

			if (confirm.HasValue && confirm.Value)
			{
				busyInstallReset = true;

				cli.RunCommand("wget", "-O acme.sh https://get.acme.sh");
				cli.RunCommand("sudo", "chmod +x acme.sh");
				cli.RunCommand("sudo", "bash acme.sh");

				//acme.GetVersion();

				if (cli.StandardOut.Contains("Install success!"))
				{
					layout?.ShowNotification(NotificationSeverity.Success, "Success", "ACME installed successfully!");
				}
				else
				{
					layout?.ShowNotification(NotificationSeverity.Error, "Error", "ACME failed to install!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			StateHasChanged();
		}
	}
}
