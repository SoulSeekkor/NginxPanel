@page "/settings"

@inject DialogService DialogService;
@inject Services.ACME acme;
@inject Services.CLI cli;
@inject Services.Nginx nginx;

<PageTitle>Settings</PageTitle>
<br />
<br />
<h3>Settings</h3>
<br />
<br />
Install or reinstall Nginx, leaves configs and gives the option of stable or mainline:
<br />
<RadzenButton Click=@(() => InstallNginx()) Disabled="busyInstallReset" Text="@installText" Icon="cached" BusyText="Installing..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
<br />
<br />
Reset Nginx by reinstalling (includes configs):
<br />
<RadzenButton Click=@(() => ResetNginx()) Disabled="true" Text="Reset Nginx" Icon="cached" BusyText="Resetting..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
<br />
<br />
@if (!acme.Installed)
{
	<span>Install ACME:</span>
	<br />
	<RadzenButton Click=@(() => InstallACME()) Disabled="busyInstallReset" Text="Install ACME" Icon="cached" BusyText="Installing..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
}
else
{
	<span>Uninstall ACME:</span>
	<br />
	<RadzenButton Click=@(() => UninstallACME()) Disabled="busyInstallReset" Text="Uninstall ACME" Icon="cached" BusyText="Uninstalling..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
	<br />
	<br />
	<span>Upgrade ACME:</span>
	<br />
	<RadzenButton Click=@(() => UpgradeACME()) Disabled="busyInstallReset" Text="Upgrade ACME" Icon="cached" BusyText="Upgrading..." IsBusy="busyInstallReset" ButtonStyle="ButtonStyle.Danger" />
}

@code {
	[CascadingParameter]
	private MainLayout? layout { get; set; }

	string installText = "Install Nginx";

	private bool busyInstallReset = false;

	protected override void OnInitialized()
	{
		if (nginx.Installed)
		{
			installText = "Reinstall Nginx";
		}
	}

	private void ResetNginx()
	{
		//busyInstallReset = true;

		//cli.RunCommand("sudo", "apt purge nginx nginx-common nginx-full");
		//cli.RunCommand("sudo", "apt install nginx");

		// If all else fails
		//cli.RunCommand("sudo", "dpkg --force-confmiss -i /var/cache/apt/archives/nginx-common_*.deb ");

		//busyInstallReset = false;
	}

	private async void InstallNginx()
	{
		try
		{
			busyInstallReset = true;
			StateHasChanged();


			var result = await DialogService.OpenAsync("Nginx Package", ds =>
	@<RadzenStack Gap="1.5rem">
		<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Please select the Nginx package to use.</RadzenText>
		<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
			<RadzenStack Orientation="Orientation.Horizontal">
				<RadzenButton Text="System Default" Click="@(() => ds.Close(""))" Style="width: 140px;" />
				<RadzenButton Text="Stable" Click="@(() => ds.Close("stable"))" Style="width: 80px;" />
				<RadzenButton Text="Mainline" Click="@(() => ds.Close("mainline"))" Style="width: 80px;" />
			</RadzenStack>
			<RadzenButton Text="Cancel" Click="() => ds.Close()" ButtonStyle="ButtonStyle.Light" Style="float: right;" />
		</RadzenStack>
	</RadzenStack>
	);

			if (!(result is null))
			{
				await Task.Run(() =>
				{
					// Remove existing Nginx first
					cli.RunCommand("apt remove nginx nginx-common nginx-full -y");

					if (!String.IsNullOrWhiteSpace(result))
					{
						// Install dependencies
						cli.RunCommand("apt install software-properties-common -y");

						if (result == "stable")
							cli.RunCommand("add-apt-repository ppa:ondrej/nginx -y");  // Stable
						else if (result == "mainline")
							cli.RunCommand("add-apt-repository ppa:ondrej/nginx-mainline -y");  // Mainline

						cli.RunCommand("apt update");
						cli.RunCommand("apt install nginx-full -y");
					}
					else
					{
						// Remove custom repositories if they exist first
						cli.RunCommand("add-apt-repository --remove ppa:ondrej/nginx -y");
						cli.RunCommand("add-apt-repository --remove ppa:ondrej/nginx-mainline -y");
						cli.RunCommand("apt update");
						cli.RunCommand("apt install nginx -y");  // Default system package
					}
				});

				layout?.DisplayToast(MainLayout.toastType.success, "Nginx installed successfully!");
			}
		}
		finally
		{
			busyInstallReset = false;
			nginx.Refresh();
			StateHasChanged();
		}
	}

	private async void InstallACME()
	{
		try
		{
			bool? confirm = await DialogService.Confirm($"Are you sure you want to install the ACME script?", "Install ACME", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

			if (confirm.HasValue && confirm.Value)
			{
				busyInstallReset = true;
				StateHasChanged();

				await Task.Run(() =>
				{
					//cli.RunCommand("apt install openssl cron socat curl");  // Potential prerequisite packages
					cli.RunCommand("wget -O acme.sh https://get.acme.sh");
					cli.RunCommand("chmod +x acme.sh");
					cli.RunCommand("bash acme.sh");
				});

				if (cli.StandardOut.Contains("Install success!"))
				{
					layout?.DisplayToast(MainLayout.toastType.success, "ACME installed successfully!");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, "ACME failed to install!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			acme.Refresh();
			StateHasChanged();
		}
	}

	private async void UninstallACME()
	{
		try
		{
			bool? confirm = await DialogService.Confirm($"Are you sure you want to uninstall the ACME script?", "Uninstall ACME", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", CloseDialogOnOverlayClick = true });

			if (confirm.HasValue && confirm.Value)
			{
				busyInstallReset = true;
				StateHasChanged();

				await Task.Run(() =>
				{
					cli.RunCommand($"{cli.HomePath}/.acme.sh/acme.sh --uninstall", sudo: false);
				});

				if (cli.StandardOut.Contains("Uninstalling alias"))
				{
					layout?.DisplayToast(MainLayout.toastType.success, "ACME uninstalled successfully!");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, "ACME failed to uninstall!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			acme.Refresh();
			StateHasChanged();
		}
	}

	private async void UpgradeACME()
	{
		try
		{
			bool autoUpgrade = false;
			var result = await DialogService.OpenAsync("Upgrade ACME", ds =>
	@<RadzenStack>
		<span>Are you sure you want to upgrade the ACME script?</span>
		<span class="rz-text-align-left">
			<RadzenCheckBox @bind-Value=@autoUpgrade Name="chkAutoUpgrade" />
			<RadzenLabel Text="Auto Upgrade" Component="chkAutoUpgrade" MouseEnter="@(args => layout?.ShowTooltip(args, "Set to auto upgrade going forward.", new TooltipOptions(){ Position = TooltipPosition.Right }) )" Style="margin-left: 8px; vertical-align: middle;" />
		</span>
		<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
			<RadzenStack Orientation="Orientation.Horizontal">
				<RadzenButton Text="Yes" Click="() => ds.Close(true)" Style="width: 80px;" />
				<RadzenButton Text="No" Click="() => ds.Close(false)" Style="width: 80px;" ButtonStyle="ButtonStyle.Light" />
			</RadzenStack>
		</RadzenStack>
	</RadzenStack>
	);

			if (!(result is null) && result)
			{
				busyInstallReset = true;
				StateHasChanged();

				await Task.Run(() =>
				{
					cli.RunCommand($"{cli.HomePath}/.acme.sh/acme.sh --upgrade --auto-upgrade " + (autoUpgrade ? "1" : "0"), sudo: false);
				});

				if (cli.StandardOut.Contains("Upgrade success!"))
				{
					layout?.DisplayToast(MainLayout.toastType.success, "ACME upgraded successfully! Auto upgrade was " + (autoUpgrade ? "enabled" : "disabled") + ".");
				}
				else
				{
					layout?.DisplayToast(MainLayout.toastType.error, "ACME failed to upgrade!");
				}
			}
		}
		finally
		{
			busyInstallReset = false;
			acme.Refresh();
			StateHasChanged();
		}
	}
}
