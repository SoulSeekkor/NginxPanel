@page "/sites"

@using NginxPanel.Services;

@inject Services.CLI CLI;
@inject Services.Nginx Nginx;

<PageTitle>Sites</PageTitle>
<br />
<br />
<h3>Sites</h3>

<RadzenButton Click=@(() => RefreshSites(true)) Disabled="busyRefreshing" Text="Refresh" Icon="cached" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Info" />
<RadzenButton Click=@(() => RefreshSites(true)) Disabled="busyRefreshing" Text="Add" Icon="add" BusyText="Refreshing..." IsBusy="busyRefreshing" ButtonStyle="ButtonStyle.Success" />
<br />
<br />

<RadzenAccordion Multiple="true">
    <Items>
        @foreach (Services.Nginx.ConfigFile conf in Nginx.SiteConfigs)
        {
            <RadzenAccordionItem Text="@conf.Name" Icon="description" class="p-1 rz-background-color-light rz-color-on-light rz-text-align-left rz-shadow-10">
                <RadzenCard>
                    <RadzenButton Click=@(() => RefreshSites(true)) Disabled="busyRefreshing" Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="float: right;" />
                    <RadzenCheckBox TValue="bool" Value="@conf.Enabled" Name="@conf.Name" Change="() => ToggleSite(conf)" />
                    <RadzenLabel Text="Enabled" Component="@conf.Name"/>

                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mt-5" TagName="TagName.H3">Configuration:</RadzenText>
                    <RadzenTextArea Value="@conf.FileContents" Change=@((value) => @conf.FileContents = value) Cols="125" Rows="20" />
                    <br />
                <RadzenButton Click=@(() => Save(conf)) Disabled="busyRefreshing" Text="Save" Icon="save" BusyText="Saving..." IsBusy="conf.busySaving" ButtonStyle="ButtonStyle.Secondary" />
                </RadzenCard>
            </RadzenAccordionItem>
        }
    </Items>
</RadzenAccordion>

@code {
    [CascadingParameter]
    private MainLayout? layout { get; set; }

    private bool busyRefreshing = false;

    protected override void OnInitialized()
    {
        RefreshSites(false);
    }

    private async void RefreshSites(bool notifyUser)
    {
        try
        {
            busyRefreshing = true;

            await Task.Run(() => Nginx.RefreshFiles());

            if (notifyUser)
            {
                layout?.ShowNotification(NotificationSeverity.Info, "Info", "Sites refreshed successfully!");
            }
        }
        finally
        {
            busyRefreshing = false;
            StateHasChanged();
        }
    }

    private void ToggleSite(Services.Nginx.ConfigFile conf)
    {
        try
        {
            Nginx.ToggleEnabled(conf);

            if (conf.Enabled)
            {
                layout?.ShowNotification(NotificationSeverity.Success, "Success", $"Site <span style='color: blue; font-style: italic;'>{conf.Name}</span> enabled successfully!");
            }
            else
            {
                layout?.ShowNotification(NotificationSeverity.Success, "Success", $"Site <span style='color: red; font-style: italic;'>{conf.Name}</span> disabled successfully!");
            }
        }
        catch
        {
            layout?.ShowNotification(NotificationSeverity.Error, "Error", $"Error occurred while updating site '{conf.Name}'!");
        }
    }

    private async void Save(Nginx.ConfigFile conf)
    {
        try
        {
            conf.busySaving = true;

            await Task.Run(() => File.WriteAllText(conf.ConfigPath, conf.FileContents));

            layout?.ShowNotification(NotificationSeverity.Success, "Success", $"Site <span style='color: blue; font-style: italic;'>{conf.Name}</span> saved successfully!");
        }
        catch
        {
            layout?.ShowNotification(NotificationSeverity.Error, "Error", $"Error occurred while saving site '{conf.Name}'!");
        }
        finally
        {
            conf.busySaving = false;
            StateHasChanged();
        }
    }
}