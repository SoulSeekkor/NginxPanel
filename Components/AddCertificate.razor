@inject DialogService DialogService;

<RadzenStack>
	<span>Please enter the primary certificate domain:</span>
	<RadzenTextBox @oninput="@(args => primaryDomain = args.Value?.ToString() ?? "")" class="w-100" />
	<span>Please enter the subject alternative domains (SANs):</span>
	<RadzenTextBox @bind-Value=addSANdomain class="w-100" /><RadzenButton Click=@(() => AddSAN(SANdomains!, addSANdomain, SANs)) Icon="add" ButtonStyle="ButtonStyle.Success" />
	<RadzenListBox @ref=SANs @bind-Value=selectedSAN Data="@SANdomains" Style="height: 180px;" />
	<RadzenButton Click=@(() => DeleteSAN(SANdomains!, selectedSAN, SANs)) Icon="delete" ButtonStyle="ButtonStyle.Danger" />
	<span class="rz-text-align-left rz-mt-5 rz-mb-5">
		<RadzenCheckBox TValue="bool" Change="@(args => exportToPFX = args)" Name="chkExportPFX" />
		<RadzenLabel Text="Export to PFX" Component="chkExportPFX" Style="margin-left: 8px; vertical-align: middle;" />
		<RadzenLabel Text="PFX password:" Style="margin-left: 50px; vertical-align: middle;" />
		<RadzenTextBox @oninput="@(args => PFXpassword = args.Value?.ToString() ?? "")" class="w-20" />
	</span>
	<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
		<RadzenStack Orientation="Orientation.Horizontal">
			<RadzenButton Text="Ok" Click="() => DialogService.Close(true)" Style="width: 80px;" />
			<RadzenButton Text="Cancel" Click="() => DialogService.Close(false)" ButtonStyle="ButtonStyle.Light" />
		</RadzenStack>
	</RadzenStack>
</RadzenStack>

@code {
	[CascadingParameter]
	private MainLayout? layout { get; set; }

	private string _primaryDomain = string.Empty;
	private string _PFXpassword = string.Empty;
	private bool _exportToPFX = false;

	[Parameter]
	public List<string>? SANdomains { get; set; }
	[Parameter]
	public string primaryDomain
	{
		get => _primaryDomain;
		set
		{
			if (_primaryDomain == value) return;
			_primaryDomain = value;
			primaryDomainChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public string PFXpassword
	{
		get => _PFXpassword;
		set
		{
			if (_PFXpassword == value) return;
			_PFXpassword = value;
			PFXpasswordChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public bool exportToPFX
	{
		get => _exportToPFX;
		set
		{
			if (_exportToPFX == value) return;
			_exportToPFX = value;
			exportToPFXChanged.InvokeAsync(value);
		}
	}

	string selectedSAN = string.Empty;
	string addSANdomain = string.Empty;
	RadzenListBox<string>? SANs = null;

	[Parameter]
	public EventCallback<string> primaryDomainChanged { get; set; }
	[Parameter]
	public EventCallback<string> PFXpasswordChanged { get; set; }
	[Parameter]
	public EventCallback<bool> exportToPFXChanged { get; set; }

	private void AddSAN(List<string> domains, string addSANdomain, RadzenListBox<string>? SANs)
	{
		if (!domains.Contains(addSANdomain))
		{
			domains.Add(addSANdomain);

			// Force the listbox to refresh
			SANs?.Reset();
		}
		else
			layout?.DisplayToast(MainLayout.toastType.info, "SAN already exists!");
	}

	private void DeleteSAN(List<string> domains, string selectedSAN, RadzenListBox<string>? SANs)
	{
		if (!String.IsNullOrWhiteSpace(selectedSAN) && domains.Contains(selectedSAN))
		{
			domains.Remove(selectedSAN);

			// Force the listbox to refresh
			SANs?.Reset();
		}
	}
}